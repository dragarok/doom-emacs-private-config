#+TITLE: Emacs Config
* Doom Basics

** Set everything utf8

#+begin_src elisp
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

** User Credentials

#+begin_src elisp
(setq user-full-name "Alok Regmi"
      user-mail-address "sagar.r.alok@gmail.com")
#+end_src

** Fonts and Themes

#+begin_src elisp
(if IS-MAC
    (setq doom-font (font-spec :family "mononoki" :size 16)
          doom-variable-pitch-font (font-spec :family "Iosevka Nerd Font" :size 16)
          ;; doom-variable-pitch-font (font-spec :family "Iosevka Etoile" :size 18)
          doom-serif-font (font-spec :family "Iosevka Nerd Font" :size 16)
          ;; doom-variable-pitch-font (font-spec :family "Source Serif Pro" :size 22)
          ;; doom-serif-font (font-spec :family "Source Serif Pro" :weight 'light)
          doom-big-font (font-spec :family "mononoki" :size 20))
  )
(if IS-LINUX
    (setq doom-font (font-spec :family "Maple Mono SC NF" :size 18)
          doom-variable-pitch-font (font-spec :family "FantasqueSansMono Nerd Font" :size 18)
          ;; doom-variable-pitch-font (font-spec :family "Iosevka Etoile" :size 18)
          doom-serif-font (font-spec :family "RobotoMono Nerd Font" :size 18)
          ;; doom-variable-pitch-font (font-spec :family "Source Serif Pro" :size 22)
          ;; doom-serif-font (font-spec :family "Source Serif Pro" :weight 'light)
          doom-big-font (font-spec :family "Maple Mono SC NF" :size 25)))

(load-theme 'modus-operandi 'noconfirm)
#+end_src

** Emacs 29 Good scroll

#+begin_src elisp
(pixel-scroll-precision-mode)
#+end_src

** Doom Banner

I wanted some inspiring banner and didn't know how to do just the ascii image. So, I copied the whole function and made the edit.
#+BEGIN_SRC elisp
;; ascii art taken from https://www.asciiart.eu/space/telescopes (Telescope by Dokusan)
(defun doom-dashboard-widget-banner ()
  (let ((point (point)))
    (mapc (lambda (line)
            (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                                'face 'bold))
            (insert "\n"))
          '("             _              "
            "           /(_))            "
            "         _/   /             "
            "        //   /              "
            "       //   /               "
            "      /\\__/                "
            "      \\O_/=-0             "
            "  _  /|| \\              "
            "   \\\\/()_) \\.              "
            "  ^^  <__> \\()             "
            "    //||\\\\              "
            "     //_||_\\\\               "
            "    // \\||/ \\\\              "
            "   //   ||   \\\\             "
            "  \\/    |/    \\/            "
            "  /     |      \\            "
            " /      |       \\           "
            "        |                   "
            "-----LIGHT-----            "))
    (when (and (display-graphic-p)
               (stringp fancy-splash-image)
               (file-readable-p fancy-splash-image))
      (let ((image (create-image (fancy-splash-image-file))))
        (add-text-properties
         point (point) `(display ,image rear-nonsticky (display)))
        (save-excursion
          (goto-char point)
          (insert (make-string
                   (truncate
                    (max 0 (+ 1 (/ (- +doom-dashboard--width
                                      (car (image-size image nil)))
                                   2))))
                   ? ))))
      (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0)
                           ?\n)))))
#+END_SRC
** Disable recompiles of literate org file

#+begin_src elisp
;; ;; add to $DOOMDIR/config.el
;; (remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

* Set Defaults

** Org Directory and Org Agenda

#+BEGIN_SRC elisp
(setq nextcloud-dir (expand-file-name "~/Nextcloud/"))
(setq project-resources-dir (concat nextcloud-dir "projects/"))
(setq org-directory (expand-file-name "~/Nextcloud/org/"))

(setq! citar-bibliography '("~/Nextcloud/org/references.bib"))
(setq! citar-notes-paths '(org-roam-directory))
(setq! citar-library-paths '(("~/Nextcloud/org/Ref_Library/")))

(setq nextcloud-dir (expand-file-name "~/Nextcloud/"))
(setq project-resources-dir (concat nextcloud-dir "projects/"))
(setq org-roam-directory (concat org-directory "notes"))
(setq org-logs-directory (concat org-directory "logs/"))
(setq org-agenda-directory (concat org-directory "agenda/"))
(setq org-templates-directory (concat org-directory "templates/"))
(setq org-lookbacks-directory (concat org-directory "lookbacks/"))
(setq org-agenda-files '("~/Nextcloud/org/agenda/"))
(setq org-inbox-file (concat org-agenda-directory "inbox.org"))
(setq org-recurring-file (concat org-agenda-directory "recurring.org"))
(setq org-bookslog-file (concat org-agenda-directory "books_log.org"))
(setq org-books-file org-bookslog-file)
(setq org-projects-file (concat org-agenda-directory "projects.org"))
(setq org-tasks-file (concat org-agenda-directory "tasks.org"))
(setq org-diary-file (concat org-directory "lookbacks/diary.org"))
(setq org-motto-file (concat org-agenda-directory "motto.org"))
(setq org-someday-file (concat org-directory "archive/someday.org"))
(setq org-dailyreview-file (concat org-lookbacks-directory "dailyreview.org"))
(setq org-monthlyreview-file (concat org-lookbacks-directory "monthlyreview.org"))
(setq org-weeklyreview-file (concat org-lookbacks-directory "weeklyreview.org"))
(setq org-quarterlyreview-file (concat org-lookbacks-directory "quarterlyreview.org"))
(setq org-yearlyreview-file (concat org-lookbacks-directory "yearlyreview.org"))
(setq org-roam-logs-file (concat org-logs-directory "notes_log.txt"))

(setq org-download-method 'directory
    org-download-image-dir "~/Nextcloud/org/org-images/"
    org-download-heading-lvl nil
    org-download-delete-image-after-download t
    org-download-screenshot-method "/usr/share/sway/scripts/grimshot save area %s"
    org-download-image-org-width 600
    org-download-annotate-function (lambda (link) "") ;; Don't annotate
    )

(setq org-refile-targets
      '((org-someday-file :maxlevel . 1)
        (org-agenda-files :maxlevel . 3)))
#+END_SRC
** Buffers

#+BEGIN_SRC elisp
(setq doom-scratch-buffer-major-mode t)
(setq show-trailing-whitespace t)
#+END_SRC

** Line Numbering

I need it similar to Vim.
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

** More Org Defaults

#+begin_src elisp
(setq org-support-shift-select t)
#+end_src
** Local leader

Set local leader to comma for ease of use.
#+begin_src elisp
(setq doom-localleader-key ",")
#+end_src
** Trash

#+begin_src elisp
(setq delete-by-moving-to-trash t)
#+end_src
** Some evil help

#+begin_src elisp
(after! evil
  (setq +evil-want-o/O-to-continue-comments nil)
  (setq evil-ex-substitute-global t
        evil-move-cursor-back nil
        evil-kill-on-visual-paste nil))
(after! evil-snipe (evil-snipe-mode -1))
(map! :nv "s" #'evil-avy-goto-char-2)

#+end_src
** Set monday as starting date

#+begin_src emacs-lisp
(setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
#+end_src

* Popup Rules

#+BEGIN_SRC elisp
;; (after! org
;;   (set-popup-rule! "*CAPTURE-*" :side 'left :size .30 :select t)
;;   ;; (set-popup-rule! "^CAPTURE-[A-Za-z]*\.org$" :side 'right :size .50 :select t :vslot 2 :ttl 3)
;;   ;; (set-popup-rule! "*helm*" :side 'bottom :height .40 :select t :vslot 5 :ttl 3)
;;   ;; (set-popup-rule! "^\\*Org Src" :side 'bottom :slot -2 :height 0.6 :width 0.5 :select t :autosave t :ttl nil :quit nil)
;;   (set-popup-rule! "*Org QL View:*" :side 'right :size .25 :select t)
;;   (set-popup-rule! "\\*RefTeX Select\\*" :size 80)
;;   (set-popup-rule! "*Org Select" :side 'bottom :size .50 :select t :vslot 2 :ttl 3)
;;   (set-popup-rule! "*WordNut*" :side 'bottom :size .40 :select t :vslot 2 :ttl 3)
;;   ;; (set-popup-rule! "*Calendar*" :side 'bottom :size .40 :select t :vslot 2 :ttl 3)
;;   (set-popup-rule! "Dictionary" :side 'bottom :height .40 :width 20 :select t :vslot 3 :ttl 3)
;;   ;;(set-popup-rule! "*eww*" :side 'right :size .40 :slect t :vslot 5 :ttl 3)
;;   (set-popup-rule! "*deadgrep" :side 'bottom :height .40 :select t :vslot 4 :ttl 3)
;;   ;;  (set-popup-rule! "*org-roam" :side 'right :size .25 :select t :vslot 4 :ttl 3)
;;   (set-popup-rule! "\\Swiper" :side 'bottom :size .30 :select t :vslot 4 :ttl 3)
;;   (set-popup-rule! "*xwidget" :side 'right :size .40 :select t :vslot 5 :ttl 3)
;;   (set-popup-rule! "*eshell*" :side 'bottom :size .30 :select t :hslot 2 :ttl 3)
;;   (set-popup-rule! "*Org clock budget report*" :side 'bottom :size .40 :select t :hslot 2 :ttl 3)
;;   (set-popup-rule! "*Python:ob-ipython-py*" :side 'right :size .25 :select t)
;;   )
#+END_SRC

* Tools

** Ace Link

#+BEGIN_SRC elisp
(use-package! ace-link
  :commands (ace-link))
(after! avy
  (setq avy-keys '(?a ?s ?d ?f ?j ?k ?l ?\;)))
(after! ace-window
  (setq aw-keys '(?f ?d ?s ?r ?e ?w)
        aw-scope 'frame
        aw-ignore-current t
        aw-background nil))
#+END_SRC

** Dash Docsets

#+BEGIN_SRC elisp
(after! dash-docs
  (setq counsel-dash-docsets '("Numpy" "SciPy" "R" "Julia" "Python 3" "Matplotlib" "Typescript" "Pandas"))
  (setq dash-docs-docsets '("Numpy" "SciPy" "R" "Julia" "Python 3" "Matplotlib" "Typescript" "Pandas")))
#+END_SRC
** Dired
*** Mark empty dirs

#+begin_src elisp
;;;###autoload
(defun dired-mark-empty-dirs ()
  "Interactively mark all empty directories in current Dired buffer."
  (interactive)
  (when (equal major-mode 'dired-mode)
    (save-excursion
      (dired-goto-first)
      (while (not (eobp))
        (ignore-errors
          (when (directory-empty-p (dired-get-filename))
            (dired-mark 1)
            (dired-previous-line 1)))
        (dired-next-line 1)))))
#+end_src

*** Kill all dired buffers

#+begin_src elisp
;;;###autoload
(defun kill-dired-buffers ()
  (interactive)
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))

#+end_src
*** Open a playlist in vlc
#+begin_src elisp
(require 'dired-aux)
(defvar dired-filelist-cmd
  '(("vlc" "-L")))
(defun dired-start-process (cmd &optional file-list)
  (interactive
   (let ((files (dired-get-marked-files
                 t current-prefix-arg)))
     (list
      (dired-read-shell-command "& on %s: "
                                current-prefix-arg files)
      files)))
  (let (list-switch)
    (start-process
     cmd nil shell-file-name
     shell-command-switch
     (format
      "nohup 1>
/dev/null 2>/dev/null %s \"%s\""
      (if (and (> (length file-list) 1)
               (setq list-switch
                     (cadr (assoc cmd dired-filelist-cmd))))
          (format "%s %s" cmd list-switch)
        cmd)
      (mapconcat #'expand-file-name file-list "\" \"")))))
(define-key dired-mode-map "r" 'dired-start-process)


#+end_src
*** Enter Key

#+begin_src elisp
(defun dired-find-file-or-do-async-shell-command ()
  "If there is a default command defined for this file type,
 run it asynchronously.If not, open it in Emacs."
  (interactive)
  (let (
        ;; get the default for the file type,
        ;; putting the string into a list because dired-guess-default throws an error otherwise.
        (default (dired-guess-default (cons (dired-get-filename) '())))
        ;; put the file name into a list so dired-shell-stuff-it will accept it
        (file-list (cons (dired-get-filename) '())))
    (if (null default)
        ;; if no default found for file, open in Emacs
        (dired-find-file)
      ;; if default is found for file, run command asynchronously
      (dired-run-shell-command (dired-shell-stuff-it (concat default " &") file-list nil)))))
;; This function is bound to the Return key in dired-mode to replace the default behavior on Return
(define-key dired-mode-map (kbd "<C-return>") #'dired-find-file-or-do-async-shell-command)
;; For added convenience: Don't open a new Async Shell Command window
(add-to-list 'display-buffer-alist(cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
;; Always open a new buffer if default is occupied.
;; (setq async-shell-command-buffer 'new-buffer)
#+end_src

*** Dired Send File using Kdeconnect
#+begin_src elisp
;;;###autoload
(defun dired-send-kdeconnect ()
  "This function is used to mark and send file to kdeconnect device"
  (interactive)
  (let ((device-names (shell-command-to-string "kdeconnect-cli -a --id-name-only")))
    (if (equal device-names "0 devices found")
        (message "No devices found. Cannot send the file")
      (let ((device-to-send (consult--read
                             (delete "" (split-string device-names "\n"))
                             :prompt "Select device to send:  "
                             :history 'consult-kdeconnect-history
                             :require-match t
                             )))
        (let ((filenames (if (eq (dired-get-marked-files) nil)
                             ;; since filenames with spaces will have errors, enclose them with quotes
                             (mapconcat (lambda (x) (concat "\"" x "\"")) (dired-get-filename) " ")
                           (mapconcat (lambda (x) (concat "\"" x "\"")) (dired-get-marked-files) " "))))
          (message filenames)
          (shell-command (concat "kdeconnect-cli -d"
                                 (car (split-string device-to-send))
                                 " --share "
                                 filenames
                                 )
                         )
          )
        )
      )
    )
  )
#+end_src

** Eshell Aliases for Ease of Use

Eshell have some aliases for ease of use.
#+BEGIN_SRC elisp
(after! eshell
  (set-eshell-alias!
   "f"   "find-file $1"
   "l"   "ls -1"
   "ll"   "ls -lh"
   "la"   "ls -la"
   "d"   "dired $1"
   "gl"  "(call-interactively 'magit-log-current)"
   "gs"  "magit-status"
   "gc"  "magit-commit"
   "d" "dired $1"
   "gl" "(call-interactively 'magit-log-current)"
   "gb" "(call-interactively #'magit-branch-checkout)"
   "gbc" "(call-interactively #'magit-branch-create)"
   "bat" "+eshell/bat $1"
   "sudo" "eshell/sudo $*"
   "nm" "nc/enwc"
   "locate" "counsel-locate $1"
   "man" "(+default/man-or-woman)"
   "info" "+eshell/info-manual"
   "tm" "transmission"
   "cal" "calendar"
   "pass" "(pass)"
   "fd" "+eshell/fd $1"
   "fo" "find-file-other-window $1"
   "rgi" "+default/search-cwd"
   "rg"  "rg --color=always $*"))
#+END_SRC

** Hydra
*** Hydra Posframe

#+BEGIN_SRC elisp
(use-package hydra
  :config
  (use-package hydra-posframe
    :custom
    (hydra-posframe-parameters
      '((left-fringe . 5)
        (right-fringe . 5)))
    :custom-face
    (hydra-posframe-border-face ((t (:background "#6272a4"))))
    :hook (after-init . hydra-posframe-mode)))
#+END_SRC

** Orch Toggle

Tool for sending my notes from Samsung note 3 into org mode directly.
#+BEGIN_SRC elisp
(after! org
  (autoload 'orch-toggle "orch" nil t))
#+END_SRC

** Projectile Ignored Directories

Irritates you every time you get to search for a module. So, ignore these.
#+begin_src elisp
(setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))

(after! projectile
  (add-to-list 'projectile-globally-ignored-directories "*.stversions"))
#+end_src

** Spray

For faster reading when bored. It helps me focus on one hand and if I am already focused to sprint through the text faster.
#+BEGIN_SRC elisp
(global-set-key (kbd "<f6>") 'spray-mode)
(use-package spray
  ;; :commands (spray-faster spray-slower)
  :defer t
  :config
  :bind (:map spray-mode-map
         ("M-f" . spray-faster)
         ("M-S-f" . spray-slower)
         ("M-s" . spray-start/stop)
         ("M-q" . spray-quit)
         )
  )
#+END_SRC

** Smerge on each magit diff

#+BEGIN_SRC elisp
(use-package smerge-mode
  :after hydra
  :config
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (unpackaged/smerge-hydra/body)))))
#+END_SRC

** VLF (Very Large Files) Setup

Very large files often break emacs. And this way, we only see a portion.
#+BEGIN_SRC elisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+END_SRC

** Writeroom

#+begin_src elisp
(setq writeroom-extra-line-spacing 0.3
      writeroom-width 100)

(add-hook 'writeroom-mode-hook #'mixed-pitch-mode)
#+end_src
** Vterm
*** Vterm Execute Current Line
#+begin_src elisp
(defun my/vterm-execute-current-line ()
  "Insert text of current line in vterm and execute."
  (interactive)
  (require 'vterm)
  (let ((command (buffer-substring
                  (save-excursion
                    (beginning-of-line)
                    (point))
                  (save-excursion
                    (end-of-line)
                    (point)))))
    (let ((buf (current-buffer)))
      (unless (get-buffer vterm-buffer-name)
        (vterm))
      (display-buffer vterm-buffer-name t)
      (switch-to-buffer-other-window vterm-buffer-name)
      (vterm--goto-line -1)
      (message command)
      (vterm-send-string command)
      (vterm-send-return)
      (switch-to-buffer-other-window buf)
      )))
#+end_src

*** Vterm Named Terminal

Named terminal with vterm/here

#+begin_src elisp
;;;###autoload
(defun +vterm--change-directory-if-remote ()
  "When `default-directory` is remote, use the corresponding
method to prepare vterm at the corresponding remote directory."
  (when (and (featurep 'tramp)
             (tramp-tramp-file-p default-directory))
    (message "default-directory is %s" default-directory)
    (with-parsed-tramp-file-name default-directory path
      (let ((method (cadr (assoc `tramp-login-program
                                 (assoc path-method tramp-methods)))))
        (vterm-send-string
         (concat method " "
                 (when path-user (concat path-user "@")) path-host))
        (vterm-send-return)
        (vterm-send-string
         (concat "cd " path-localname))
        (vterm-send-return)))))

;;;###autoload
(defun +vterm/here (arg)
  "Open a terminal buffer in the current window at project root.

If prefix ARG is non-nil, cd into `default-directory' instead of project root."
  (interactive "P")
  (unless (fboundp 'module-load)
    (user-error "Your build of Emacs lacks dynamic modules support and cannot load vterm"))
  (require 'vterm)
  ;; This hack forces vterm to redraw, fixing strange artefacting in the tty.
  (save-window-excursion
    (pop-to-buffer "*scratch*"))
  (let* ((project-root (or (doom-project-root) default-directory))
         (default-directory
           (if arg
               default-directory
             project-root))
         display-buffer-alist)
    (setenv "PROOT" project-root)
    (setq my-proj-name (concat "vterm-" (nth 0 (reverse (s-split "/" project-root 'omit-nulls)))))
    (if (get-buffer my-proj-name)
        (switch-to-buffer my-proj-name)
      (vterm my-proj-name))
    ;; (vterm my-proj-name)
    (+vterm--change-directory-if-remote)))
#+end_src

*** Vterm for projects

#+begin_src elisp
(defun +my/vterm-run-project ()
  (interactive)
  (+evil-window-vsplit-a)
  (+evil-window-split-a)
  (call-interactively '+vterm/here))
#+end_src

** Nepali Romanized Layout

#+BEGIN_SRC elisp
(require 'nepali-romanized)
#+END_SRC

** Pomodoro

#+begin_src elisp
;;;###autoload
(defun ruborcalor/org-pomodoro-time ()
  "Return the remaining pomodoro time"
  (if (org-pomodoro-active-p)
      (cl-case org-pomodoro-state
        (:pomodoro
         (format "Pomo: %d mins - %s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
        (:short-break
         (format "SB %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
        (:long-break
         (format "LB %d mins" (/ (org-pomodoro-remaining-seconds) 60)))
        (:overtime
         (format "Overtime! %d minutes" (/ (org-pomodoro-remaining-seconds) 60))))
    "NO POMO"))

(after! org
  (require 'org-pomodoro)
  (setq org-pomodoro-length 45
        org-pomodoro-short-break-length 10
        org-pomodoro-long-break-length 15
        org-pomodoro-keep-killed-pomodoro-time t
        org-pomodoro-long-break-frequency 3
        org-pomodoro-play-sounds t
        org-pomodoro-ticking-sound-p t))
#+end_src

** Blamer

#+begin_src elisp
(use-package blamer
  :bind (("s-i" . blamer-show-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (configblamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background nil
                   :height 140
                   :italic t)))
  )
#+end_src
** Copilot

#+begin_src elisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("<right>". 'copilot-accept-completion)
         ("C-f". 'copilot-accept-completion)
         ("M-f". 'copilot-accept-completion-by-word)
         ("C-e". 'copilot-accept-completion-by-line)
         ("<end>". 'copilot-accept-completion-by-line)
         ("TAB" . 'copilot-accept-completion))
  :config
  (advice-add #'indent-for-tab-command :before #'copilot-complete)
  )

#+end_src


*** For copilot disable smartparens

#+begin_src elisp
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
;; (add-hook 'doom-first-buffer-hook #'electric-pair-mode)
#+end_src
** Org Books

#+begin_src elisp
(after! org
  (require 'org-books)
  (setq org-books-file-depth 0)
  (setq org-books-genre-tag-associations '(("Fiction" . "Fiction")
                                           ("Nonfiction" . "Nonfiction")
                                           ("Science Fiction" . "Scifi")
                                           ("Classics" . "Classics")
                                           ("Poetry" . "Poetry")
                                           ("Drama" . "Drama")
                                           ("Comedy" . "Comedy")
                                           ("Action" . "Action")
                                           ("Adventure" . "Adventure")
                                           ("Computer Science" . "ComputerScience")
                                           ("Engineering" . "Engineering")
                                           ("Fantasy" . "Fantasy")
                                           ("Mystery" . "Mystery")
                                           ("Thriller" . "Thriller")
                                           ("Design" . "Design")
                                           ("Business" . "Business")
                                           ("Productivity" . "Productivity")
                                           ("Adult" . "Adult")
                                           ("Horror" . "Horror")
                                           ("Romance" . "Romance")
                                           ("Historical" . "Historical")
                                           ("Reference" . "Reference")
                                           ("Writing" . "Writing")
                                           ("Biography" . "Biography")
                                           ("Autobiography" . "Autobiography")
                                           ("Memoir" . "Memoir")
                                           ("History" . "History")
                                           ("Science" . "Science")
                                           ("Self Help" . "SelfHelp")
                                           ("Business" . "Business")
                                           ("Psychology" . "Psychology")
                                           ("Philosophy" . "Philosophy")
                                           ("Religion" . "Religion")
                                           ("Politics" . "Politics")
                                           ("Economics" . "Economics")
                                           ("Art" . "Art")
                                           ("Music" . "Music")
                                           ("Cooking" . "Cooking")
                                           ("Travel" . "Travel")
                                           ("Humor" . "Humor")
                                           ("Poetry" . "Poetry")
                                           ("Short Stories" . "ShortStories")
                                           ("Comics" . "Comics")
                                           ("Graphic Novels" . "GraphicNovels")
                                           ("Children's" . "Children")
                                           ("Young Adult" . "YoungAdult")
                                           ("Other" . "Other"))))
#+end_src
** Org Transclusion

#+begin_src emacs-lisp
(use-package! org-transclusion
              :after org
              :init
              (map!
               :map global-map "<f8>" #'org-transclusion-add
               :leader
               :prefix "n"
               :desc "Org Transclusion Mode" "T" #'org-transclusion-mode))
#+end_src
** Org Remark

#+begin_src emacs-lisp
(after! org
  (org-remark-global-tracking-mode +1)

  ;; Optional if you would like to highlight websites via eww-mode
  (with-eval-after-load 'eww
    (org-remark-eww-mode +1))
  ;; Key-bind `org-remark-mark' to global-map so that you can call it
  ;; globally before the library is loaded.

  (define-key global-map (kbd "C-c n m") #'org-remark-mark)

  ;; The rest of keybidings are done only on loading `org-remark'
  (with-eval-after-load 'org-remark
    (define-key org-remark-mode-map (kbd "C-c n o") #'org-remark-open)
    (define-key org-remark-mode-map (kbd "C-c n ]") #'org-remark-view-next)
    (define-key org-remark-mode-map (kbd "C-c n [") #'org-remark-view-prev)
    (define-key org-remark-mode-map (kbd "C-c n r") #'org-remark-remove))
  )
#+end_src

** Org Noter

#+begin_src elisp
(after! org
  (defun who/org-noter-insert-highlighted-note ()
    "Highlight the active region and add a precise note at its position."
    (interactive)
    ;; Adding an annotation will deactivate the region, so we reset it afterward
    (let ((region (pdf-view-active-region)))
      (call-interactively 'pdf-annot-add-highlight-markup-annotation)
      (setq pdf-view-active-region region))
    (call-interactively 'org-noter-insert-precise-note))

  (setq org-noter-always-create-frame nil
        org-noter-insert-selected-text-inside-note t
        ;; ;; The WM can handle splits
        ;; org-noter-notes-window-location 'other-frame
        ;; I want to see the whole file
        org-noter-hide-other nil
        org-noter-insert-note-no-questions t
        org-noter-notes-search-path '(org-roam-directory)
        org-noter-separate-notes-from-heading t
        ;; org-noter-auto-save-last-location t
        )
  ;; fuxialexander's code
  ;; (add-hook! org-noter-notes-mode (require 'org-noter-pdftools))
)
#+end_src

** Org Noter Pdftools Jump to Note

#+begin_src elisp
(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

* Languages
** Elisp

#+begin_src elisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
#+end_src

** Python
*** Set shortcuts to send command to shell when in windows

#+begin_src elisp
(when (eq system-type 'windows-nt)
  (map! :localleader
        :map python-mode-map
        :nvm "r" #'+python/open-repl
        :nvm "R" #'+python/open-ipython-repl
        :vm "X" #'python-shell-send-region
        :n "x" #'python-shell-send-defun
        :n "X" #'python-shell-send-buffer
        :n "z" #'python-shell-send-statement
        :n "F" #'python-shell-send-file
        :nvm "h" #'scimax-python-mode/body
        ))
#+end_src
*** Debugging in python

#+begin_src elisp
(after! python-mode
  (setq dap-python-debugger 'debugpy)
  ;; (dap-register-debug-template
  ;;  "Python :: Run pytest"
  ;;  (list :type "python"
  ;;        :cwd "C:/EHP/utils/"
  ;;        :module "pytest"
  ;;        :request "launch"
  ;;        :debugger 'debugpy
  ;;        :name "Python :: Run Pytest (EHP)"))
  )
#+end_src
*** Pyright multi root server

#+begin_src elisp
(setq lsp-pyright-multi-root nil)
#+end_src
*** Numpydoc

#+begin_src elisp
(use-package numpydoc
  :ensure t
  :bind (:map python-mode-map
              ("C-c C-n" . numpydoc-generate))
  :config
  (setq! numpydoc-insertion-style 'yas))
#+end_src

** Latex

#+BEGIN_SRC elisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities)))
#+END_SRC
** Org Mode
*** Make org mode look better

#+begin_src elisp
(after! org

  (lambda () (progn
                          (setq left-margin-width 2)
                          (setq right-margin-width 2)
                          (set-window-buffer nil (current-buffer))))
  (setq org-startup-indented t
        org-hide-leading-stars t
        org-ellipsis "  " ;; folding symbol
        org-hide-emphasis-markers t ;; show actually italicized text instead of /italicized text/
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-auto-align-tags 'nil
        org-tags-column 0
        org-fold-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-pretty-entities t
        org-insert-heading-respect-content t
        org-priority-faces '((?A . (:foreground "red" :weight bold))
                             (?B . (:foreground "green" :weight bold))
                             (?C . (:foreground "tomato"))
                             (?D . (:foreground "orange")))
        org-priority-default 68
        org-priority-highest 65
        org-priority-lowest 68
        )

  ;; (global-org-modern-mode)
  )
#+end_src
*** Org Latex Options

#+begin_src elisp
(after! org
  (setq org-format-latex-options
        (plist-put org-format-latex-options
                   :scale 1.1)
        ;; org-startup-with-latex-preview nil
        ;; (+org-init-custom-links-h)
        )
  )
#+end_src

*** Org Imdb

#+begin_src emacs-lisp
(use-package! orgmdb
  :after org
  :config
  (setq orgmdb-omdb-apikey "")
  )
#+end_src

** Markdown
*** Markdown Local leader mappings

#+begin_src elisp
(map! :localleader
      :map markdown-mode-map
      :prefix ("i" . "Insert")
      :desc "Blockquote"    "q" 'markdown-insert-blockquote
      :desc "Horiz rule"    "r" 'markdown-insert-hr
      :desc "Bold"          "b" 'markdown-insert-bold
      :desc "Table"         "T" 'markdown-insert-table
      :desc "Code"          "c" 'markdown-insert-code
      :desc "Emphasis"      "e" 'markdown-insert-italic
      :desc "Footnote"      "f" 'markdown-insert-footnote
      :desc "Code Block"    "s" 'markdown-insert-gfm-code-block
      :desc "List Item"     "n" 'markdown-insert-list-item
      :desc "Pre"           "p" 'markdown-insert-pre
      :prefix ("h" . "Headings")
      :desc "One"   "1" 'markdown-insert-header-atx-1
      :desc "Two"   "2" 'markdown-insert-header-atx-2
      :desc "Three" "3" 'markdown-insert-header-atx-3
      :desc "Four"  "4" 'markdown-insert-header-atx-4
      :desc "Five"  "5" 'markdown-insert-header-atx-5
      :desc "Six"   "6" 'markdown-insert-header-atx-6)
#+end_src

* Functionalities
** TODO Org Protocol sway
#+BEGIN_SRC elisp
(after! org
(require 'org-capture)
(require 'org-protocol)

;;; Org Capture
;;;; Thank you random guy from StackOverflow
;;;; http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection

(defadvice org-capture
    (after make-full-window-frame activate)
  "Advise capture to be the only window when used as a popup"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-frame)))
)

#+END_SRC
** Split window to see latest buffer and close it back again

#+begin_src elisp
(defun sanityinc/split-window()
  "Split the window to see the most recent buffer in the other window.
Call a second time to restore the original window configuration."
  (interactive)
  (if (eq last-command 'sanityinc/split-window)
      (progn
        (jump-to-register :sanityinc/split-window)
        (setq this-command 'sanityinc/unsplit-window))
    (window-configuration-to-register :sanityinc/split-window)
    (switch-to-buffer-other-window nil)))

(global-set-key (kbd "<f7>") 'sanityinc/split-window)

#+end_src
** Setting shell to wsl bash on windows

#+begin_src elisp
(when (eq system-type 'windows-nt)
  (defun me/bash ()
    (interactive)
    (let ((explicit-shell-file-name "C:/Windows/System32/bash.exe"))
      (shell))))
#+end_src
** Chrome Bookmarks Processing
#+BEGIN_SRC elisp
(defvar chrome-bookmarks-file
  (cl-find-if
   #'file-exists-p
   ;; Base on `helm-chrome-file'
   (list
    "~/Library/Application Support/Google/Chrome/Profile 1/Bookmarks"
    "~/Library/Application Support/Google/Chrome/Default/Bookmarks"
    "~/AppData/Local/Google/Chrome/User Data/Default/Bookmarks"
   ;; "~/.config/google-chrome/Default/Bookmarks"
   ;; "~/bookmarks_edge_beta.json"
   ;; "~/bookmarks_edge_dev.json"
   ;; "~/bookmarks_edge.json"
    "~/.config/BraveSoftware/Brave-Browser/Default/Bookmarks"
   ;; "~/.config/google-chrome/Default/Bookmarks"
   ;; "~/.config/chromium/Default/Bookmarks"
    (substitute-in-file-name
     "$LOCALAPPDATA/Google/Chrome/User Data/Default/Bookmarks")
    (substitute-in-file-name
     "$USERPROFILE/Local Settings/Application Data/Google/Chrome/User Data/Default/Bookmarks")))
  "Path to Google Chrome Bookmarks file (it's JSON).")



;;;###autoload
(defun chrome-bookmarks-insert-as-org ()
  "Insert Chrome Bookmarks as org-mode headings."
  (interactive)
  (require 'json)
  (require 'org)
  (let ((data (let ((json-object-type 'alist)
                    (json-array-type  'list)
                    (json-key-type    'symbol)
                    (json-false       nil)
                    (json-null        nil))
                (json-read-file chrome-bookmarks-file)))
        level)
    (cl-labels ((fn
                 (al)
                 (pcase (alist-get 'type al)
                   ("folder"
                    (insert
                     (format "%s %s\n"
                             (make-string level ?*)
                             (alist-get 'name al)))
                    (cl-incf level)
                    (mapc #'fn (alist-get 'children al))
                    (cl-decf level))
                   ("url"
                    (insert
                     (format "%s %s\n"
                             (make-string level ?*)
                             (org-make-link-string
                              (alist-get 'url al)
                              (alist-get 'name al))))))))
      (setq level 1)
      (fn (alist-get 'bookmark_bar (alist-get 'roots data)))
      (setq level 1)
      (fn (alist-get 'other (alist-get 'roots data))))))

#+END_SRC

* Appearances

** Vterm face

#+begin_src emacs-lisp
(custom-set-faces!
  '(vterm-color-black :foreground "OrangeRed3" :background "BlueViolet"))
#+end_src
** Latex in Org Mode

#+begin_src elisp
(after! org
  (setq org-format-latex-options
        (plist-put org-format-latex-options
                   :scale 1.1)
        ;; org-startup-with-latex-preview nil
        ;; (+org-init-custom-links-h)
        )
  )
#+end_src

** Yasnippet Color Change
#+begin_src elisp
(use-package! yasnippet
  :config
  ;; It will test whether it can expand, if yes, change cursor color
  (defun hp/change-cursor-color-if-yasnippet-can-fire (&optional field)
    (interactive)
    (setq yas--condition-cache-timestamp (current-time))
    (let (templates-and-pos)
      (unless (and yas-expand-only-for-last-commands
                   (not (member last-command yas-expand-only-for-last-commands)))
        (setq templates-and-pos (if field
                                    (save-restriction
                                      (narrow-to-region (yas--field-start field)
                                                        (yas--field-end field))
                                      (yas--templates-for-key-at-point))
                                  (yas--templates-for-key-at-point))))
      (set-cursor-color (if (and templates-and-pos (first templates-and-pos)
                                 (eq evil-state 'insert))
                            (doom-color 'red)
                          (face-attribute 'default :foreground)))))
  :hook (post-command . hp/change-cursor-color-if-yasnippet-can-fire))
;; For adding code snippets in yasnippet
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))

#+end_src
** Markdown Mixed Pitch and Fill for Visual Cleanliness
#+begin_src elisp
(add-hook! (gfm-mode markdown-mode) #'mixed-pitch-mode)
(add-hook! (gfm-mode markdown-mode) #'visual-line-mode #'turn-off-auto-fill)
#+end_src

* Newest Changes
** PDF Related Config
*** Pdf highlight just using keyboard
#+begin_src elisp
(defcustom pdf-links-convert-pointsize-scale 0.02
  "The scale factor for the -pointsize convert command.

This determines the relative size of the font, when interactively
reading links."
  :group 'pdf-links
  :type '(restricted-sexp :match-alternatives
                          ((lambda (x) (and (numberp x)
                                       (<= x 1)
                                       (>= x 0))))))

(defun pdf-links-read-char-action (query prompt)
  "Using PROMPT, interactively read a link-action.
BORROWED FROM `pdf-links-read-link-action'.
See `pdf-links-action-perform' for the interface."
  (pdf-util-assert-pdf-window)
  (let* ((links (pdf-info-search-string
                 query
                 (pdf-view-current-page)
                 (current-buffer)))
         (keys (pdf-links-read-link-action--create-keys
                (length links)))
         (key-strings (mapcar (apply-partially 'apply 'string)
                              keys))
         (alist (cl-mapcar 'cons keys links))
         (size (pdf-view-image-size))
         (colors (pdf-util-face-colors
                  'pdf-links-read-link pdf-view-dark-minor-mode))
         (args (list
                :foreground (car colors)
                :background "blue"
                :formats
                `((?c . ,(lambda (_edges) (pop key-strings)))
                  (?P . ,(number-to-string
                          (max 1 (* (cdr size)
                                    pdf-links-convert-pointsize-scale)))))
                :commands pdf-links-read-link-convert-commands
                :apply (pdf-util-scale-relative-to-pixel
                        (mapcar (lambda (l) (car (cdr (assq 'edges l))))
                                links)))))
    (print colors)

    (unless links
      (error "No links on this page"))
    (unwind-protect
        (let ((image-data nil))
          (unless image-data
            (setq image-data (apply 'pdf-util-convert-page args ))
            (pdf-cache-put-image
             (pdf-view-current-page)
             (car size) image-data 'pdf-links-read-link-action))
          (pdf-view-display-image
           (create-image image-data (pdf-view-image-type) t))
          (pdf-links-read-link-action--read-chars prompt alist))
      (pdf-view-redisplay))))

(defun avy-timed-input ()
  "BORROWED FORM `avy--read-candidates'"
  (let ((str "")
        char break)
    (while (and (not break)
                (setq char
                      (read-char (format "char%s (prefer multiple chars w.r.t. speed): "
                                         (if (string= str "")
                                             str
                                           (format " (%s)" str)))
                                 t
                                 (and (not (string= str ""))
                                      avy-timeout-seconds))))
      ;; Unhighlight
      (cond
       ;; Handle RET
       ((= char 13)
        (if avy-enter-times-out
            (setq break t)
          (setq str (concat str (list ?\n)))))
       ;; Handle C-h, DEL
       ((memq char avy-del-last-char-by)
        (let ((l (length str)))
          (when (>= l 1)
            (setq str (substring str 0 (1- l))))))
       ;; Handle ESC
       ((= char 27)
        (keyboard-quit))
       (t
        (setq str (concat str (list char))))))
    (print str)))

(defun get-coordinates (end)
  (let* ((query (avy-timed-input))
         (coords (list (or (pdf-links-read-char-action query "Please specify (SPC scrolls): ")
                           (error "No char selected")))))
    ;; (print coords)
    ;; (print (car (alist-get 'edges (car coords))))))
    (car (alist-get 'edges (car coords)))))



(defun pdf-keyboard-highlight ()
  (interactive)
  (let* ((start (get-coordinates nil))
         (end (get-coordinates t))
         (edges (append (cl-subseq start 0 2) (cl-subseq end 2 4))))
    (pdf-annot-add-markup-annotation
     edges 'highlight '"yellow") nil))
#+end_src

*** Pdf view mode keybindings
#+begin_src elisp
;; PDF Tools ease of highlighting and history
(map!
 :map pdf-view-mode-map
 :v "a" #'pdf-annot-add-highlight-markup-annotation
 :v "A" #'pdf-annot-add-markup-annotation
 :v "t" #'pdf-annot-add-text-annotation
 :n "x" #'pdf-annot-delete
 :n "c" #'pdf-history-backward
 :n "C" #'pdf-history-forward
 :n "b" #'pdf-view-set-slice-from-bounding-box
 :n "p" #'pdf-keyboard-highlight
 :n "B" #'pdf-view-reset-slice)
#+end_src
** Consult and Vertico addons and shortcuts
*** Split and choose a buffer in the same workspace vertico
#+begin_src elisp
;;;###autoload
(defun +vertico/switch-workspace-buffer-other-window()
  (interactive)
  (+evil-window-vsplit-a)
  (+vertico/switch-workspace-buffer))
#+end_src

*** Find recent files using consult
#+begin_src elisp
(defun consult-recent-file ()
  "Find recent using `completing-read'."
  (interactive)
  (find-file
   (consult--read
    (or (message (mapcar #'abbreviate-file-name recentf-list))
        (user-error "No recent files, `recentf-mode' is %s"
                    (if recentf-mode "on" "off")))
    :prompt "Find recent file: "
    :sort nil
    :require-match t
    :category 'file
    :state (consult--file-preview)
    :history 'file-name-history)))
#+end_src

** YAML Mode
#+begin_src elisp
(add-hook 'yaml-mode-hook
          (lambda ()
            (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src
** Pandoc Import
#+begin_src elisp
(use-package! org-pandoc-import :after org)
#+end_src
** Magit Delta
#+begin_src elisp
(add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))
#+end_src
** Window Manipulation
*** Toggle between horizontal and vertical split
#+begin_src elisp
(defun window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))
#+end_src
** Ispell
#+begin_src elisp
(setq ispell-dictionary "en")
#+end_src
** Hugo

#+begin_src elisp
(after! org
  (setq org-hugo-base-dir "~/workspace/personalblog/"))
#+end_src
** Book set tags

#+begin_src elisp
;; (setq my-book-genres '("Fantasy" "Science Fiction" "Mystery" "Thriller"
;;                        "Romance" "Historical" "Non-Fiction" "Biography"
;;                        "Self-Help" "Children's" "Young Adult"))

;; Assuming `org-books-genre-tag-associations` is defined as you provided

(defun set-book-genres ()
  "Set book genre tags on the current Org-mode heading."
  (interactive)
  ;; Ensure we are in an Org buffer
  (unless (derived-mode-p 'org-mode)
    (error "Not in an Org-mode buffer"))

  ;; Extract just the keys (genres) from the association list
  (let* ((genre-keys (mapcar 'car org-books-genre-tag-associations))
         (selected-genres (completing-read-multiple
                           "Select genres (use comma to separate): "
                           genre-keys nil t))
         ;; Look up the full tag for each selected genre
         (full-tags (mapcar (lambda (genre)
                              (cdr (assoc genre org-books-genre-tag-associations)))
                            selected-genres))
         ;; Join the full tags with colons, as required by `org-set-tags'
         (genres-str (mapconcat 'identity full-tags ":")))

    ;; Set the genres as tags on the current heading
    (org-set-tags genres-str)))
#+end_src

* My own configurations
** Create ML Projects
#+BEGIN_SRC elisp
;;;###autoload
(defun create-new-ml-project (proj-name proj-type)
  "Initial setup for any ML project"
  (interactive "sEnter the project full path:
sEnter type of project: ")
  (+workspace/new)
  (if (equal proj-type "p")
      (setq full-proj (cl-concatenate 'string "~/workspace/personal/" proj-name ))
    (setq full-proj (cl-concatenate 'string "~/workspace/work/" proj-name)))
  ;; (message "%s" full-proj)
  (dired-create-directory full-proj)
  (dired-create-directory (cl-concatenate 'string full-proj "/src"))
  (dired-create-directory (cl-concatenate 'string full-proj "/input"))
  (dired-create-directory (cl-concatenate 'string full-proj "/models"))
  (magit-init full-proj)
  (shell-command "joe linux python >> .gitignore")
  (ml-gitignore)
  (setq py-files '("src/__init__.py" "predict.py" "utils.py" "dataset.py"
                   "feature_generator.py" "dispatcher.py" "create_folds.py"
                   "train.py" "loss.py"))
  (dolist (element py-files)
    (message "%s" element)
    (find-file element)
    (save-buffer))
  (projectile-add-known-project full-proj)
  (projectile-switch-project-by-name full-proj)
)

;;;###autoload
(defun ml-gitignore ()
  (find-file ".gitignore")
  (insert "
# input and data related\n
input/\n
models/\n

# data
*.csv
*.h5
*.pkl
*.hd5
*.pth

")
  (save-buffer)
)
#+END_SRC
** Run Django Projects
;; Run my django project with the commands I want to run set in dir-locals.el file
#+begin_src elisp
;;;###autoload
(defun run-django-project()
  "Run a django project with commands
from .dir-locals.el"
  (interactive)
  ;; (message dir-local-variables-alist)
  (setq django-commands (eval (cdr (assoc 'django-commands dir-local-variables-alist))))
  (call-interactively '+vterm/here) ()
  (dolist (command django-commands)
    (vterm-send-string command)
    (vterm-send-return))
  )
#+end_src
** Time Related Quick Functions
#+begin_src elisp
;; Time related functions from holtzermann17
(defun now ()
  "Insert string for the current time formatted like '2:34 PM'."
  (interactive)
  (insert (format-time-string "[%D %-I:%M %p]")))
;; 04/29/21 3:08 pm

(defun today ()
  "Insert string for today's date nicely formatted in American style,
e.g. Sunday, September 17, 2000."
  (interactive)
  (insert (format-time-string "[%Y-%m-%d %a]")))
;; Thu, April 29, 2021
;; Thursday, April 29, 2021
;; <2021-04-29 Thu, April 29>

(defun date ()
  (interactive)
  (insert (date-string)))

(defun date-string ()
  (interactive)
  (format-time-string  "[%Y-%m-%d %a %-H:%M]" nil t))

(defun now-string ()
  (interactive)
  (format-time-string  "[%Y-%m-%d %-H:%M|Z]" nil t))

#+end_src
** Box Comments
#+begin_src elisp
(defun ess-r-comment-box-line ()
  "Insert a comment box around the text of the current line of an R script.
If the current line indentation is 0, the comment box begins with ###.
Otherwise, it begins with ## and is indented accordingly."
  (interactive)
  (save-excursion
    (let ((beg (progn (back-to-indentation)
                      (point)))
          (end (line-end-position)))
      (comment-box beg end
                   (if (> (current-indentation) 0)
                       1
                     2)))))

;; A keybinding specific to ESS-R mode:
(add-hook 'ess-r-mode-hook
          #'(lambda ()
              (local-set-key (kbd "H-/") #'ess-r-comment-box-line)))
#+end_src
** Org roam and agenda

#+begin_src elisp
;;;###autoload
(defun my/create-id-and-copy-link()
  "Creates id for the given heading at point and returns the org link"
  (org-id-get-create)
  (kill-new (concat "[[id:" (org-id-get) "]" "["
                    ;; get 2 min taskname if it's there
                    (let ((props (org-entry-properties)))
                      (if (cdr (assoc "2_MIN_TNAME" props))
                          (cdr (assoc "2_MIN_TNAME" props))
                        (cdr (assoc "ITEM" props))))
                    "]]"))
  (save-buffer))

;;;###autoload
(defun my/copy-heading-link()
  "Copies heading link from org mode to be pasted anywhere else in org mode"
  (interactive)
  (if (equal (buffer-name) "*Org Agenda*")
      (let* ((marker (org-get-at-bol 'org-marker))
             (buffer (marker-buffer marker))
             (pos (marker-position marker)))
        (org-with-remote-undo buffer
          (with-current-buffer buffer
            (goto-char pos)
            (my/create-id-and-copy-link))))
    (my/create-id-and-copy-link)
    )
  )

;;;###autoload
(defun my/clock-in-and-back()
  "Enter on the link at point, clock in, and come back here."
  (interactive)
  (save-excursion
    (link-hint-open-link-at-point)
    (org-clock-in)
    (save-buffer)
    (org-mark-ring-goto)))

;;;###autoload
(defun my/work-done-and-update()
  "Go to the task under point, mark it done, return back,
 and update in roam-dailies"
  (interactive)
  (save-excursion
    (link-hint-open-link-at-point)
    (org-todo 'done)
    (save-buffer)
    (org-mark-ring-goto)
    (org-toggle-checkbox)
    ))

#+end_src
** Org roam set auto read on fixed count of words

#+begin_src elisp
(defun buffer-count-words ()
  "Count the number of words in region"
  (save-excursion
    (goto-char 0)
    (let ((counter 0))
      (while (< (point) (point-max))
        (re-search-forward "\\w+\\W*")
        (setq counter (1+ counter)))
      (+ 0 counter))))

(setq org-roam-autoread-max-words 500)
(setq org-roam-autoread-enabled t)
(defun org-roam-autoread-mode-check ()
  (if (and org-roam-autoread-enabled (eq major-mode 'org-mode) (string-prefix-p org-roam-directory buffer-file-name) (< org-roam-autoread-max-words (buffer-count-words)))
      (read-only-mode)))
(add-hook 'after-save-hook #'org-roam-autoread-mode-check)
#+end_src
** Org roam set tags

#+begin_src elisp
;; (after! org
;;   (defun tag-new-org-roam-node ()
;;     (let (-tag-list)
;;       (setq -tag-list (completing-read-multiple "Tags" (org-roam-tag-completions)))
;;       (org-roam-tag-add -tag-list)
;;       )
;;     )
;;   (add-hook 'org-roam-capture-new-node-hook #'tag-new-org-roam-node))
#+end_src
** Org roam create note for project

#+begin_src emacs-lisp
;;;###autoload
(defun title-to-org-roam-node (title)
  "Create an Org-roam note from the current headline and jump to it."
  (interactive)
  (let ((node nil)
        (filetag ""))
    (setq node (org-roam-node-create :title title))
    (setq filetag (list "auto"))
    (if (org-roam-node-file node)
        (progn
          (message "Skipping %s, node already exists" title)
          node)  ; Return node here if it already exists
      (org-roam-capture- :node node
                         :keys "r")
      (org-entry-put (point-min) "PROJ_RESOURCES_DIR" (concat "[[" project-resources-dir title "]]"))
      (org-roam-tag-add filetag)
      (org-capture-finalize nil)
      ;; (kill-whole-line)
      ;; (org-capture-finalize nil)
      node)  ; Return node here after creating new node
    ))
#+end_src

** Daily Ritual

#+begin_src elisp
(defun open-my-daily-ritual ()
  "Opens daily ritual if it's the first time I am opening emacs"
  (interactive "p")
  (if (or (not (boundp 'last-ritual-open))
          (> (time-to-seconds (time-since last-ritual-open)) 50))
      (progn
        (sit-for 5)
        (setq last-ritual-open (current-time))
        (eval-after-load "savehist"
          '(add-to-list 'savehist-additional-variables 'last-ritual-open))
        ;; (+org-init-agenda-h)
        ;; (+org-init-roam-h)
        ;; (+org-roam-try-init-db-a)
        (org-agenda "" "k")
        (org-agenda-redo-all)
        (sit-for 5)
        (split-window-horizontally)
        (find-file-other-window (concat org-roam-directory "my_daily_ritual.org"))
        ;; (switch-to-buffer "my_daily_ritual.org")
        )
    )
  )
#+end_src
** Advanced Project Management ( Reference Note, Resources Dir, Reference URLs )
:PROPERTIES:
:ID:       d9aafebf-54c6-4fb6-83ef-0dfd7a108532
:END:


#+begin_src elisp
(after! org
  (defun project/open-from-ancestor-heading (fn property)
    "Check the current heading and go up recursively to the parent heading until the specified property is found, then execute the given function FN."
    (save-excursion
      (while (and (not (org-entry-get nil property))
                  (org-up-heading-safe)))
      (funcall fn)))

  (defun project/open-proj-ref-url ()
    "Open the REF_URL property from the current or ancestor Org mode heading."
    (interactive)
    (project/open-from-ancestor-heading
     (lambda ()
       (let ((ref-url (org-entry-get nil "PROJ_REF_URL")))
         (when ref-url
           (browse-url ref-url))))
     "PROJ_REF_URL"))

  (defun recursively-open-ref-url ()
    "Open the REF_URL property from the current or ancestor Org mode heading."
    (interactive)
    (project/open-from-ancestor-heading
     (lambda ()
       (let ((ref-url (org-entry-get nil "REF_URL")))
         (when ref-url
           (browse-url ref-url))))
     "REF_URL"))

  (defun project/open-proj-notes ()
    "Open the ORG_FILE property from the current or ancestor Org mode heading."
    (interactive)
    (project/open-from-ancestor-heading
     (lambda ()
       (let ((org-file-id (org-entry-get nil "PROJ_NOTES")))
         (when org-file-id
           (org-open-link-from-string org-file-id))))
     "PROJ_NOTES"))

  (defun recursively-open-ref-org-note ()
    "Open the ORG_FILE property from the current or ancestor Org mode heading."
    (interactive)
    (project/open-from-ancestor-heading
     (lambda ()
       (let ((org-file-id (org-entry-get nil "REF_NOTE")))
         (when org-file-id
           (org-open-link-from-string org-file-id))))
     "REF_NOTE"))

  (defun project/open-resources-dir ()
    "Open the RESOURCES_DIR property from the current or ancestor Org mode heading."
    (interactive)
    (project/open-from-ancestor-heading
     (lambda ()
       (let ((resources-dir (org-entry-get nil "PROJ_RESOURCES_DIR")))
         (when resources-dir
           (let ((path (replace-regexp-in-string "\\[\\[\\|\\]\\]" "" resources-dir)))
             (dired (org-link-unescape path))))))
     "PROJ_RESOURCES_DIR"))

  (map! :map org-mode-map
        :localleader
        :desc "Open ref org note" "z" #'recursively-open-ref-org-note
        :desc "Open ref url" "u" #'recursively-open-ref-url
        :prefix ("p" . "Project Mappings")
        :desc "Open proj ref url" "u" #'project/open-proj-ref-url
        :desc "Open proj notes" "n" #'project/open-proj-notes
        :desc "Open resources dir" "p" #'project/open-resources-dir
        "d" nil)

  ;; For agenda mode
  (defun project/execute-in-org-buffer (fn)
    "Execute the given function FN in the org buffer if called from org-agenda."
    (if (eq major-mode 'org-agenda-mode)
        (progn
          (split-window-right) ; Split the window to the right
          (other-window 1) ; Move to the new window
          (org-agenda-switch-to) ; Switch to the corresponding Org buffer
          (funcall fn))   ; Call the given function
      (call-interactively fn)))

  (map! :map org-agenda-mode-map
        :localleader
        :desc "Open ref org note" "z" (lambda () (interactive) (project/execute-in-org-buffer #'recursively-open-ref-org-note))
        :desc "Open ref url" "u" (lambda () (interactive) (project/execute-in-org-buffer #'recursively-open-ref-url))
        :desc "Open proj ref url" "pu" (lambda () (interactive) (project/execute-in-org-buffer #'project/open-proj-ref-url))
        :desc "Open proj notes" "pn" (lambda () (interactive) (project/execute-in-org-buffer #'project/open-proj-notes))
        :desc "Open resources dir" "pr" (lambda () (interactive) (project/execute-in-org-buffer #'project/open-resources-dir))
        "pd" nil)
  )
#+end_src
** Toggle full screen window

#+begin_src elisp
(defvar full-screen-window-state nil "Current state of full screen window toggle.")

(defun toggle-full-screen-window ()
  "Toggle the current window between full screen and previous configuration."
  (interactive)
  (if full-screen-window-state
      (progn
        (winner-undo)
        (setq full-screen-window-state nil))
    (progn
      (winner-mode 1) ; Ensure winner mode is enabled
      (delete-other-windows) ; Make the current window full screen
      (setq full-screen-window-state t))))

#+end_src

** Kill image after viewing it

#+begin_src emacs-lisp
(map! :map image-mode-map
      :nvm "q" #'image-kill-buffer)
#+end_src
* Independent Functions
** SmartParens Go to Matching Paren

#+begin_src elisp
(after! smartparens
  (defun zz/goto-match-paren (arg)
    "Go to the matching paren/bracket, otherwise (or if ARG is not
    nil) insert %.  vi style of % jumping to matching brace."
    (interactive "p")
    (if (not (memq last-command '(set-mark
                                  cua-set-mark
                                  zz/goto-match-paren
                                  down-list
                                  up-list
                                  end-of-defun
                                  beginning-of-defun
                                  backward-sexp
                                  forward-sexp
                                  backward-up-list
                                  forward-paragraph
                                  backward-paragraph
                                  end-of-buffer
                                  beginning-of-buffer
                                  backward-word
                                  forward-word
                                  mwheel-scroll
                                  backward-word
                                  forward-word
                                  mouse-start-secondary
                                  mouse-yank-secondary
                                  mouse-secondary-save-then-kill
                                  move-end-of-line
                                  move-beginning-of-line
                                  backward-char
                                  forward-char
                                  scroll-up
                                  scroll-down
                                  scroll-left
                                  scroll-right
                                  mouse-set-point
                                  next-buffer
                                  previous-buffer
                                  previous-line
                                  next-line
                                  back-to-indentation
                                  doom/backward-to-bol-or-indent
                                  doom/forward-to-last-non-comment-or-eol
                                  )))
        (self-insert-command (or arg 1))
      (cond ((looking-at "\\s\(") (sp-forward-sexp) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (sp-backward-sexp))
            (t (self-insert-command (or arg 1))))))
  (map! "%" 'zz/goto-match-paren))
#+end_src

** Comments region or line

#+BEGIN_SRC elisp
(defun doom/toggle-comment-region-or-line ()
  "Comments or uncomments the whole region or if no region is
selected, then the current line."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
#+END_SRC

** Archive all done entries

#+BEGIN_SRC elisp
;;;###autoload
(defun org-gtd/archive-all-done-entries ()
  "Archive all entries marked DONE"
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (while (outline-previous-heading)
      (when (org-entry-is-done-p)))))
#+END_SRC
** Make org scratch buffer

#+BEGIN_SRC elisp
;;;###autoload
(defun bh/make-org-scratch ()
  (interactive)
  (find-file "/tmp/publish/scratch.org")
  (gnus-make-directory "/tmp/publish"))

;;;###autoload
(defun bh/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))
#+END_SRC

** Jethro Kuan's Agenda Specific Code

#+BEGIN_SRC elisp
(after! org
  (defun log-todo-next-creation-date (&rest ignore)
    "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
    (when (and (string= (org-get-todo-state) "NEXT")
               (not (org-entry-get nil "ACTIVATED")))
      (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
  (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

;;;###autoload
  (defun jethro/org-agenda-process-inbox-item ()
    "Process a single item in the org-agenda."
    (org-with-wide-buffer
     (org-agenda-set-tags)
     ;; (org-agenda-set-property)
     (org-agenda-priority)
     (org-agenda-set-effort)
     (call-interactively 'org-agenda-schedule)
     (org-agenda-set-property)
     (org-agenda-refile nil nil t)))


;;;###autoload
  (defun jethro/bulk-process-entries ()
    (interactive)
    (if (not (null org-agenda-bulk-marked-entries))
        (let ((entries (reverse org-agenda-bulk-marked-entries))
              (processed 0)
              (skipped 0))
          (dolist (e entries)
            (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
              (if (not pos)
                  (progn (message "Skipping removed entry at %s" e)
                         (cl-incf skipped))
                (goto-char pos)
                (let (org-cl-loop-over-headlines-in-active-region) (funcall 'jethro/org-agenda-process-inbox-item))
                ;; `post-command-hook' is not run yet.  We make sure any
                ;; pending log note is processed.
                (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                          (memq 'org-add-log-note post-command-hook))
                  (org-add-log-note))
                (cl-incf processed))))
          (org-agenda-redo)
          (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
          (message "Acted on %d entries%s%s"
                   processed
                   (if (= skipped 0)
                       ""
                     (format ", skipped %d (disappeared before their turn)"
                             skipped))
                   (if (not org-agenda-persistent-marks) "" " (kept marked)")))))


;;;###autoload
  (defun jethro/org-process-inbox ()
    "Called in org-agenda-mode, processes all inbox items."
    (interactive)
    (org-agenda-bulk-mark-regexp "refile")
    (jethro/bulk-process-entries))
  )
#+END_SRC
** Saveplace disable
#+begin_src emacs-lisp
(use-package! saveplace-pdf-view
  :disabled t)
#+end_src

* Keybindings
I use Super key to operate any operation that I use more frequently. Also, some
keybindings are used such that they were previously not used by doom emacs for
ease of use.
** General
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c o") 'bh/make-org-scratch)
(global-set-key (kbd "C-c s") 'bh/switch-to-scratch)
(bind-key "C-M-s-f" 'evil-window-vsplit)
(bind-key "C-M-s-\"" 'evil-avy-goto-char-timer)
(bind-key "C-M-s-h" 'evil-avy-goto-char-2)
(bind-key "C-M-s-v" 'consult-flymake)
(bind-key "<f5>" 'powerthesaurus-transient)
(bind-key "C-M-s-p" 'evil-window-split)
(bind-key "C-M-s-t" '+my/vterm-run-project)
(bind-key "C-M-s-q" '+workspace/close-window-or-workspace)
(bind-key "C-M-s-l" '+workspace/load)
(bind-key "C-M-s-<tab>" '+vertico/switch-workspace-buffer)
(bind-key "C-M-s-/" 'consult-ripgrep)
(bind-key "C-M-s-d" 'projectile-find-dir-other-window)
(bind-key "C-M-s-<return>" '+vertico/switch-workspace-buffer-other-window)
(bind-key "C-M-s-z" 'consult-recent-file)
(bind-key "C-M-s-x" 'consult-buffer)
(bind-key "C-M-s-{" 'org-roam-dailies-find-today)
(bind-key "C-M-s-}" 'org-roam-dailies-find-tomorrow)
(bind-key "C-M-s-SPC" 'insert-org-roam-link)
;; (bind-key "C-M-s-a" '+ivy/switch-workspace-buffer)
(bind-key "C-M-s-!" 'winum-select-window-1)
(bind-key "C-M-s-@" 'winum-select-window-2)
(bind-key "C-M-s-#" 'winum-select-window-3)
(bind-key "C-M-s-$" 'winum-select-window-4)
(bind-key "C-M-s-%" 'winum-select-window-5)
;; scroll other window, useful when working with multiple files
(bind-key "C-M-s-j" 'scroll-other-window-down)
(bind-key "C-M-s-k" 'scroll-other-window)
(bind-key "C-M-s-:" 'newline-and-indent)
(bind-key "C-M-s-c" #'doom/toggle-comment-region-or-line)
(map! :leader
      :n ">" #'projectile-find-dir
      :n "[" #'+vertico/consult-fd
      :n "]" #'+default/org-notes-search
      :n "e" #'+default/compile
      (:prefix "o"
       :n "U" #'elfeed
       :n "s" #'org-open-at-point
       :n "u" #'elfeed-update
       ;; EXPERIMENTAL HACK
       ;; :n "p" #'dired-sidebar-toggle-sidebar
       :n "o" #'dired-jump)
      (:prefix "s"
       :n "q" #'org-ql-search
       :n "a" #'consult-org-agenda
       :n "w" #'consult-org-heading)
      (:prefix "v"
       :n "i" #'(lambda ()
                  (interactive)
                  (switch-to-buffer (find-file-noselect org-inbox-file)))
       :n "t" #'(lambda ()
                  (interactive)
                  (switch-to-buffer (find-file-noselect org-tasks-file)))
       :n "d" #'(lambda ()
                  (interactive)
                  (switch-to-buffer (find-file-noselect org-diary-file)))
       :n "b" #'(lambda ()
                  (interactive)
                  (switch-to-buffer (find-file-noselect org-bookslog-file)))
       :n "p" #'(lambda ()
                  (interactive)
                  (switch-to-buffer (find-file-noselect org-projects-file)))
       :n "r" #'(lambda ()
                  (interactive)
                  (switch-to-buffer (find-file-noselect org-recurring-file)))
       :n "D" #'dash-docs-activate-docset
       :n "e" #'ein:run
       :n "f" #'sp-forward-sexp
       :n "n" #'ein:notebooklist-open
       :n "o" #'ein:notebooklist-new-notebook-with-name)
      (:prefix "j"
       :n "r" #'jupyter-org-interrupt-kernel
       :n "c" #'jupyter-org-clone-blcok
       :n "s" #'org-babel-jupyter-scratch-buffer
       :n "S" #'jupyter-repl-scratch-buffer
       :n "e" #'jupyter-org-restart-and-execute-to-point)
      (:prefix "z"
       :n "a" #'unpackaged/iedit-or-flyspell
       :n "s" #'create-new-ml-project
       :n "w" #'change-env-and-restart-lsp
       :n "l" #'unpackaged/lorem-ipsum-overlay
       :n "h" #'unpackaged/org-outline-numbers
       :n "g" #'unpackaged/magit-status
       :n "u" #'unpackaged/flex-fill-paragraph
       :n "i" #'org-mru-clock-in
       :n "f" #'auto-fill-mode
       :n "z" #'zoom-mode
       :n "y" #'jethro/bulk-process-entries
       :n "j" #'grab-x-link-firefox-insert-org-link
       :n "b" #'grab-x-link-brave-insert-org-link
       :n "d" #'unpackaged/org-refile-to-datetree-using-ts-in-entry)
      (:prefix "d"
       :n "h" #'org-ref-bibtex-hydra/body
       :n "w" #'+hydra/window-nav/body
       :n "m" #'hydra-multiple-cursors/body
       :n "s" #'+org-private@org-babel-hydra/body
       :n "t" #'scimax-org-table/body
       :n "h" #'scimax-org-headline/body
       :n "n" #'org-toogle-narrow-to-subtree
       :n "w" #'+hydra/window-nav/body
       :n "p" #'scimax-python-mode/body
       :n "o" #'org-noter
       :n "c" #'org-noter-pdftools-create-skeleton
       :n "j" #'org-hugo-auto-export-mode
       :n "p" #'poetry
       :n "r" #'poetry-run
       :n "d" #'scimax-dired/body)
      )
#+END_SRC


** Jupyter Ob Keybindings
#+BEGIN_SRC elisp
(after! org

  (evil-define-key 'normal org-mode-map
    ;; keybindings mirror ipython web interface behavior
    "go" 'org-babel-previous-src-block
    "gO" 'org-babel-next-src-block)

  ;; keys used:  o, b, p, y,e  and P,Y,B,O,E,J,K
  (map! :map org-mode-map
        "<C-return>" 'org-ctrl-c-ctrl-c
        "<H-return>" 'jupyter-org-execute-and-next-block
        ;; "gI" 'org-babel-previouH-src-block
        ;; "H-s" 'org-babel-next-src-block
        "H-e" 'jupyter-org-execute-to-point
        "H-E" 'jupyter-org-execute-subtree

        "H-K" 'jupyter-org-move-src-block
        "H-J" '(lambda ()
                        (interactive)
                        (jupyter-org-move-src-block t))

        "H-O" 'jupyter-org-insert-src-block
        "H-o" '(lambda ()
                        (interactive)
                        (jupyter-org-insert-src-block t))

        "H-B" 'jupyter-org-split-src-block
        "H-b" '(lambda ()
                        (interactive)
                        (jupyter-org-split-src-block t))
        "C-H-k" 'jupyter-org-merge-blocks
        "H-p" 'jupyter-org-jump-to-block
        "H-P" 'jupyter-org-jump-to-visible-block
        "H-y" 'jupyter-org-kill-block-and-results
        "H-Y" 'jupyter-org-copy-block-and-results
        "C-H-l" 'jupyter-org-clear-all-results
        "H-n" 'jupyter-org-next-busy-src-block
        "H-N" 'jupyter-org-previous-busy-src-block
        "<H-return>" '(lambda ()
                        (interactive)
                        (jupyter-org-execute-and-next-block t)))
)
#+END_SRC

** Org Markup
TODO Use them only inside org mode
#+BEGIN_SRC elisp
(after! org
  ;; (define-key org-mode-map (kbd "H--") 'other-window)
  ;; (define-key org-mode-map (kbd "H-+") 'org-strikethrough-region-or-point)
  (define-key org-mode-map (kbd "C-M-s-|") 'org-italics-region-or-point)
  (define-key org-mode-map (kbd "C-M-s-+") 'org-bold-region-or-point)
  (define-key org-mode-map (kbd "C-M-s-_") 'org-verbatim-region-or-point)
  (define-key org-mode-map (kbd "C-M-s-(") 'org-code-region-or-point)
  (define-key org-mode-map (kbd "C-M-s-)") 'org-superscript-region-or-point)
  ;; (define-key org-mode-map (kbd "H-u") 'org-underline-region-or-point)
  ;; (define-key org-mode-map (kbd "H-l") 'org-latex-math-region-or-point)
)
#+END_SRC
** Ease in projects
#+BEGIN_SRC elisp
;; (bind-key "H-F" 'evil-window-split)
;; (bind-key "H-f" 'evil-window-vsplit)
;; (bind-key "H-t" '+my/vterm-run-project)
;; (bind-key "H-;" '+evil-window-split-a)
;; (bind-key "H-\\" '+evil-window-vsplit-a)
#+END_SRC

* Note Taking Setup
** Scihub
#+BEGIN_SRC elisp
(setq scihub-homepage "https://sci-hub.st"
      scihub-download-directory "~/pdfs"
      scihub-open-after-download nil)
#+END_SRC
* Org Mode

** Org MRU Clock

#+begin_src elisp
(use-package! org-mru-clock
  :after org
  :config
  (setq org-mru-clock-how-many 40)
  (add-hook 'minibuffer-setup-hook #'org-mru-clock-embark-minibuffer-hook)
  )

#+end_src
** Category icons
#+BEGIN_SRC elisp
(customize-set-value
 'org-agenda-category-icon-alist
 `(
   ;; Tasks that are still not classified but will be in the future
   ("Inbox" ,(list (nerd-icons-mdicon "nf-md-checkbox_blank_badge" :height 1.2)) nil nil :ascent center)
   ;; Reminders of dates for something important
   ("Events" ,(list (nerd-icons-mdicon "nf-md-calendar_clock" :height 1.2)) nil nil :ascent center)
   ;; Long term tasks whose output is not immediately known
   ("ToTheMoon" ,(list (nerd-icons-mdicon "nf-md-rocket_launch_outline" :height 1.2)) nil nil :ascent center)
   ;; Short term tasks that show immediate improvements
   ("ToImprove" ,(list (nerd-icons-mdicon "nf-md-motorbike" :height 1.2)) nil nil :ascent center)
   ;; Something I do just for the sake of doing it
   ("Hobby" ,(list (nerd-icons-mdicon "nf-md-spa" :height 1.2)) nil nil :ascent center)
   ;; Health related tasks
   ("Fitness" ,(list (nerd-icons-faicon "nf-fa-heartbeat" :height 1.2)) nil nil :ascent center)
   ;; Tasks that don't fall into any category
   ("Normal" ,(list (nerd-icons-mdicon "nf-md-laptop" :height 1.2)) nil nil :ascent center)
   ;; Something that is not too valuable in terms of information
   ("Mundane" ,(list (nerd-icons-mdicon "nf-md-emoticon_sad_outline" :height 1.2)) nil nil :ascent center)
   ;; Birthdays and Anniversaries
   ("Celebration" ,(list (nerd-icons-mdicon "nf-md-cake" :height 1.2)) nil nil :ascent center)
   ;; Birthdays and Anniversaries
   ("EHP" ,(list (nerd-icons-faicon "nf-fa-key" :height 1.2)) nil nil :ascent center)
   ;; ("recurring" ,(list (nerd-icons-mdicon "loop" :height 1.2)) nil nil :ascent center)
   ;; ("someday" ,(list (nerd-icons-mdicon "schedule" :height 1.2)) nil nil :ascent center)
   ;; ("project" ,(list (nerd-icons-mdicon "stars" :height 1.2)) nil nil :ascent center)
   ;; ("reading" ,(list (nerd-icons-mdicon "book" :height 1.2)) nil nil :ascent center)
   ;; ("coding" ,(list (nerd-icons-mdicon "code" :height 1.2)) nil nil :ascent center)
   ;; Based on purpose
   ;; ("hobby" ,(list (nerd-icons-mdicon "gamepad" :height 1.2)) nil nil :ascent center)
   ;; ("finance" ,(list (nerd-icons-mdicon "attach_money" :height 1.2)) nil nil :ascent center)
   ;; ("skill" ,(list (nerd-icons-mdicon "directions_bike" :height 1.2)) nil nil :ascent center)
   ;; ("relax" ,(list (nerd-icons-mdicon "ondemand_video" :height 1.2)) nil nil :ascent center)
   ;; ("research" ,(list (nerd-icons-mdicon "explore" :height 1.2)) nil nil :ascent center)
   ;; ("fitness" ,(list (nerd-icons-mdicon "spa" :height 1.2)) nil nil :ascent center)
   ;; ("daytoday" ,(list (nerd-icons-mdicon "local_grocery_store" :height 1.2)) nil nil :ascent center)
   ;; ("feedback" ,(list (nerd-icons-mdicon "loop" :height 1.2)) nil nil :ascent center)
   ;; ;; Things that get excluded from the list of purpose
   ;; ("events" ,(list (nerd-icons-mdicon "event" :height 1.2)) nil nil :ascent center)
   ;; ("inbox" ,(list (nerd-icons-mdicon "check_box" :height 1.2)) nil nil :ascent center)
   ;; ("necessity" ,(list (nerd-icons-mdicon "hourglass_full" :height 1.2)) nil nil :ascent center)
   ;;
   ;; ("office" ,(list (nerd-icons-mdicon "work" :height 1.2)) nil nil :ascent center)
   ;; ("mundane" ,(list (nerd-icons-mdicon "weekend" :height 1.2)) nil nil :ascent center)
   ;; ("emacs" ,(list (nerd-icons-mdicon "format_paint" :height 1.2)) nil nil :ascent center)
   ;; ("tinker" ,(list (nerd-icons-mdicon "build" :height 1.2)) nil nil :ascent center)
   ;; ("freelance" ,(list (nerd-icons-mdicon "redeem" :height 1.2)) nil nil :ascent center)
   ;; ("book" ,(list (nerd-icons-mdicon "book" :height 1.2)) nil nil :ascent center)
   ))

(customize-set-value
 'org-fancy-priorities-list
 `(
   (?A ,(concat " " (nerd-icons-mdicon "nf-md-pulse" :height 1.2) " "))
   (?B ,(concat " " (nerd-icons-mdicon "nf-md-telescope" :height 1.2) " "))
   (?C ,(concat " " (nerd-icons-mdicon "nf-md-fire" :height 1.2) " "))
   (?D ,(concat " " (nerd-icons-mdicon "nf-md-database_search_outline" :height 1.2) " "))
   ))

(customize-set-value
 'org-priority-faces
 `(
   (?A . (:foreground "red" :weight bold))
   (?B . (:foreground "green" :weight bold))
   (?C . (:foreground "tomato"))
   (?D . (:foreground "orange"))
   ))
#+END_SRC

** Org Defaults
All file definitions and defaults go here.
#+BEGIN_SRC elisp
(after! org
  ;; (add-hook 'org-mode-hook #'auto-fill-mode)
  (setq org-attach-id-dir (concat org-directory ".attach/")
        ;; show images instead of links to images
        org-startup-with-inline-images t
        org-archive-mark-done t
        org-archive-tag "DONE"
        org-image-actual-width nil
        +org-export-directory (concat org-directory "publish/")
        org-archive-location (concat org-directory "archive/archive.org::datetree/")
        org-default-notes-file org-inbox-file
        projectile-project-search-path '("~/workspace/"))
  )
#+END_SRC
** Org EDNA
#+begin_src elisp
(after! org
  (require 'org-edna)
  (org-edna-mode))
#+end_src
** Org GTD Functions
#+begin_src elisp
(after! org
  (setq org-stuck-projects '("+LEVEL=1-DONE+CATEGORY=\"project\""
                             ("TODO" "NEXT" "WAIT")
                             nil ""))
  (defconst org-complete-projects
    "+LEVEL=1+CATEGORY=\"project\""
    "How to identify projects in the GTD system.")
  (defun org-gtd--org-element-pom (element)
    "Return buffer position for start of Org ELEMENT."
    (org-element-property :begin element))
  (defun org-archive-complete-projects ()
    "Archive all projects for which all actions/tasks are marked as done.
        Done here is any done `org-todo-keyword'."
    (interactive)
    (org-map-entries
     (lambda ()
       (if (org-gtd--project-complete-p)
           (progn
             (setq org-map-continue-from (org-element-property
                                          :begin
                                          (org-element-at-point)))
             (org-archive-subtree-default))))
     org-complete-projects))
  (defun org-gtd--project-complete-p ()
    "Return t if project complete, nil otherwise.
A project is considered complete when all its actions/tasks are
marked with a done `org-todo-keyword'."
    (let ((entries (cdr (org-map-entries
                         (lambda ()
                           (org-entry-get
                            (org-gtd--org-element-pom (org-element-at-point))
                            "PROJ"))
                         t
                         'tree))))
      (seq-every-p (lambda (x) (string-equal x "DONE")) entries)))
  (defun org-delegate-task ()
    "Process GTD inbox item by delegating it.
Allow the user apply user-defined tags from
`org-tag-persistent-alist', `org-tag-alist' or file-local tags in
the inbox.  Set it as a waiting action and refile to
`org-gtd-actionable-file-basename'."
    (interactive)
    (org-narrow-to-subtree)
    (org-set-tags-command)
    (org-todo "WAITING")
    (org-set-property "DELEGATED_TO" (read-string "Who will do this? "))
    (org-schedule 0)
    (widen))
  )
#+end_src
** Org TODO Configs
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-tags-column 40)
  (setq org-tags-column 40)
  (setq org-agenda-start-with-log-mode t)
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline) %TAGS")
  (setq org-tags-exclude-from-inheritance '("project"))
  (setq org-agenda-sorting-strategy
        '((agenda time-up) (todo time-up) (tags time-up) (search time-up)))

  (add-to-list 'org-global-properties
               '("Effort". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        ;; for showing only recurring task's next entry
        org-agenda-show-future-repeats "next"
        )


  (setq org-todo-keyword-faces
        '(("TODO" :foreground "DeepSkyBlue4" :weight bold)
          ("TOREAD" :foreground "DeepSkyBlue4" :weight bold)
          ("WAITING" :foreground "light sea green" :weight bold)
          ("READING" :foreground "light sea green" :weight bold)
          ("SOMEDAY" :foreground "chocolate3" :weight bold)
          ("REVISE" :foreground "firebrick" :weight bold)
          ("SUMMARISE" :foreground "firebrick" :weight bold)
          ("DELEGATED" :foreground "Gold" :weight bold)
          ("NEXT" :foreground "red1" :weight bold)
          ("ACTIVE" :background "DimGray" :foreground "gold1" :weight bold)
          ("DONE" :foreground "slategrey" :weight bold)))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "ACTIVE(a)" "REVISE(y)" "REVIEW(r@/!)" "|" "DONE(d!/!)")
          (sequence "TOREAD(z)" "READING(x)" "REVIEW(r@/!)" "SUMMARISE(s)" "|" "DONE(d!/!)")
          (sequence "SOMEDAY(f@/!)" "|" "CANCELED(c@/!)")
          (sequence "PROJ(p)" "|" "DONE(d!/!)" "CANCELED(c@/!)")
          (sequence "WAITING(w@/!)" "|" "CANCELED(c@/!)")))

  (setq org-log-state-notes-insert-after-drawers nil
        org-log-into-drawer t
        org-log-done 'time
        org-log-repeat 'time
        org-log-redeadline 'note
        org-log-reschedule 'note)

  (setq org-outline-path-complete-in-steps nil
        org-refile-allow-creating-parent-nodes 'confirm)

  ;;(advice-add #'org-refile :after 'org-save-all-org-buffers)
  ;; (advice-add #'org-agenda-exit :around 'doom-shut-up-a)
  ;;(advice-add #'org-agenda-exit :before 'org-save-all-org-buffers)

  (setq org-startup-indented t
        org-src-tab-acts-natively t)
  ;; (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))

  (setq org-tag-alist '(
                        ;; Type of work
                        (:startgroup . nil)
                        ;; Have topic you are planning for as a tag
                        ("plan" . ?n)

                        ;; Have place and person who you are meeting with
                        ;; You can use additonal tags to describe the meeting
                        ;; For example, you can use e.g. Zoom, Slack, Messenger, Place Name etc.
                        ("meeting". ?m)
                        ;; Have person as a tag if working with someone or collaborating
                        ;; ("assist". ?A)

                        ;; hobby category and coding type
                        ;; ("customization". ?C)
                        ;; ("do" . ?d)
                        ("code" . ?c)
                        ("practice" . ?s)
                        ("plain" . ?l)
                        (:endgroup . nil)

                        (:startgroup . nil)
                        ("personal" . ?p)
                        ("work" . ?w)
                        ("both" . ?b)
                        (:endgroup . nil)

                        ;; Active or Passive Work
                        (:startgroup . nil)
                        ("Active". ?a)
                        ;; ("read" . ?r)
                        ;; ("write" . ?W)
                        ("Passive". ?v)
                        ;; ("watch" . ?w)
                        ;; ("listen" . ?L)
                        (:endgroup . nil)

                        ;; Difficulty of work
                        (:startgroup . nil)
                        ("Challenge" . ?1)
                        ("Average" . ?2)
                        ("Easy" . ?3)
                        (:endgroup . nil)

                        ;; ;; Time Context for the work
                        (:startgroup . nil)
                        ("Morning" . ?4)
                        ("Day" . ?5)
                        ("Evening" . ?6)
                        (:endgroup . nil)

                        ;; Motivation required for this work
                        (:startgroup . nil)
                        ("Lazy" . ?7)
                        ("ModeratelyLazy" . ?8)
                        ("Energetic" . ?9)
                        (:endgroup . nil)
                        ))

  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
        org-clone-delete-id t)
  )

#+END_SRC
** Org Clocking
#+BEGIN_SRC elisp
(use-package org-clock-convenience
  :after org
  :bind (:map org-agenda-mode-map
              ("C-M-s-<up>" . org-clock-convenience-timestamp-up)
              ("C-M-s-<down>" . org-clock-convenience-timestamp-down)
              ("C-M-s-<right>" . org-clock-convenience-fill-gap)
              ("C-M-s-<left>" . org-clock-convenience-fill-gap-both)))
#+END_SRC

** Visit Tangled file at point
#+begin_src elisp
(after! org
  (defun ibizaman/org-babel-goto-tangle-file ()
    (if-let* ((args (nth 2 (org-babel-get-src-block-info t)))
              (tangle (alist-get :tangle args)))
        (when (not (equal "no" tangle))
          (find-file tangle)
          t)))

  (add-hook 'org-open-at-point-functions 'ibizaman/org-babel-goto-tangle-file))
#+end_src
** Org Capture Templates
#+BEGIN_SRC elisp
(after! org (add-to-list 'org-capture-templates
                         '("l" "Link Capture" entry (file (concat org-directory "extra/links.org"))
                          "* TODO [[%^{link}][%^{description}]]"
                           :immediate-finish t)))

(after! org (add-to-list 'org-capture-templates
                         '("h" "Clip Link Capture" entry (file (concat org-directory "extra/links.org"))
                           "* TODO %(org-cliplink-capture)"
                           :immediate-finish t)))


(after! org (add-to-list 'org-capture-templates
                         '("pn" "New Project" entry
                           (file "~/Nextcloud/org/agenda/inbox.org")
                           (file "~/Nextcloud/org/templates/newprojtemplate.org"))
                         ))


(after! org (add-to-list 'org-capture-templates
                         '("ps" "Create Project Subtask" entry (file org-inbox-file)
                           "* TODO %^{taskname}%?
:PROPERTIES:
:TRIGGER: next-sibling scheduled!(\"++%^{NEXT_TASK_AFTER}\") todo!(NEXT)
:BLOCKER:  previous-sibling
:CREATED:    %U
:END:
" :immediate-finish t)))


(after! org (add-to-list 'org-capture-templates
                         '("v" "Create a new habit" entry (file org-recurring-file)
                           "* TODO %^{description} %?
SCHEDULED: %^{Start Time:}t
:PROPERTIES:
:STYLE: habit
:CREATED: %U
:END:
")))

(after! org (add-to-list 'org-capture-templates
                         '("z" "Create EHP Task" entry (file org-tasks-file)
                           "* TODO %^{Task Description} %(org-set-tags \"work:Day\")%(org-set-tags-command)
SCHEDULED: %t
:PROPERTIES:
:CREATED: %U
:CATEGORY: EHP
:END:
")))

;; TODO Upgrade this functionality to use a template
;; (after! org (add-to-list 'org-capture-templates
;;                          '("e" "Add an event" entry (file (concat org-agenda-directory "birthdays_and_anniversaries.org"))
;;                            "* %^{Person}
;; \%\%(org-anniversary %^{Date}) %^{Person}'s %^{Event}
;; " :immediate-finish t)))

(after! org (add-to-list 'org-capture-templates
                         '("d" "Diary Log" entry(file+olp+datetree org-diary-file)
                           "** <%<%I:%M:%S>> %^{diary entry}
%?")))


(after! org (add-to-list 'org-capture-templates
                         '("m" "Set a Motto" entry(file+olp+datetree org-motto-file)
                           "* %^{diary entry}
%?" :immediate-finish t)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                     REVIEW TEMPLATES                                                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(after! org
  (add-to-list 'org-capture-templates
               '("r" "Make a review")))

(after! org
  (add-to-list 'org-capture-templates
               '("rw" "Weekly Review" entry
                 (file+olp+datetree org-weeklyreview-file)
                 (file "~/Nextcloud/org/templates/weeklyreviewtemplate.org") :tree-type week)))

(after! org
  (add-to-list 'org-capture-templates
               '("rm" "Monthly Review" entry
                 (file+olp+datetree org-monthlyreview-file)
                 (file "~/Nextcloud/org/templates/monthlyreviewtemplate.org") :tree-type month)))

(after! org
  (add-to-list 'org-capture-templates
               '("rq" "Quarterly Review" entry
                 (file+olp+datetree org-quarterlyreview-file)
                 (file "~/Nextcloud/org/templates/quarterlyreviewtemplate.org") :tree-type quarter)))

(after! org (add-to-list 'org-capture-templates
                         '("rd" "Daily Review" entry (file+olp+datetree org-dailyreview-file)
                           (file "~/Nextcloud/org/templates/dailyreviewtemplate.org"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                        REVIEW TEMPLATES DONE                                                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! org
  (add-to-list 'org-capture-templates
               '("C"  "Contact" entry (file (concat org-directory "extra/contacts.org"))
                 "* %(org-contacts-template-name)
    :PROPERTIES:
    :EMAIL: %(org-contacts-template-email)
    :PHONE: %^{Phone}
    :ADDRESS: %^{Home Address}
    :BIRTHDAY: %^{yyyy-mm-dd}
    :ORG:  %^{Company}
    :NOTE: %^{NOTE}
    :END:"
                 :empty-lines 1)))

(after! org (add-to-list 'org-capture-templates
                         '("c" "Capture Immediate" entry (file org-inbox-file)
                           "* TODO %^{taskname}%?
:PROPERTIES:
:CREATED:    %U
:END:
" :immediate-finish t)))
#+END_SRC
** Org Agenda
*** Agenda Motto
#+begin_src elisp
(defun my-agenda-motto (&rest _ignore)
  "INSERTS MOTTO FROM MOTTO FILE TO AGENDA"
  (let ((motto-line "")
        (decorated-motto ""))
    (with-temp-buffer
      (insert-file-contents org-motto-file)
      (goto-char (point-max))
      (forward-line -1)
      (setq motto-line (buffer-substring-no-properties
                        (line-beginning-position)
                        (line-end-position)))
      (setq decorated-motto (concat "MOTTO: "
                                    (s-upcase (s-replace "\*" "" motto-line)))))

    ;; Add properties directly to the motto
    (add-text-properties 0 (length decorated-motto)
                         '(face (:foreground "OrangeRed4" :weight bold))
                         decorated-motto)

    (dotimes (_ 160) (insert "="))
    (insert "\n")
    (dotimes (_ 40) (insert "="))
    (insert decorated-motto)
    (dotimes (_ 40) (insert "="))
    (insert "\n")
    (dotimes (_ 160) (insert "="))
    (insert "\n")))
#+end_src
*** Agenda Tweaks
#+BEGIN_SRC elisp
(after! org
  (add-hook 'org-agenda-finalize-hook
            (lambda () (remove-text-properties
                        (point-min) (point-max) '(mouse-face t))))
  )
(after! org
  (require 'org-time-budgets)
  (setq org-time-budgets '((:title "EHP" :match "+work" :budget "40:00" :blocks (workday week))
                           (:title "EHP Deep Work" :match "+work+deepwork" :budget "13:00" :blocks (workday week))
                           (:title "Meditation" :match "+meditation" :budget "10:00" :blocks (day week))
                           (:title "Review" :match "+review" :budget "1:00" :blocks (day week))
                           (:title "Ritual" :match "+ritual" :budget "0:40" :blocks (day week))
                           (:title "Entertainment" :match "+entertainment" :budget "10:00" :blocks (day week))
                           (:title "Guitar" :match "+music" :budget "3:00" :blocks (day week))
                           (:title "Exercise" :match "+exercise" :budget "1:45" :blocks (day week))
                           (:title "Coding" :match "+code" :budget "40:00" :blocks (nil week))
                           (:title "Reading" :match "+book" :budget "3:00" :blocks (nil week))
                           (:title "Yollo" :match "+personal+code" :budget "20:00" :blocks (nil week))
                           ))
  )
#+END_SRC
*** Agenda View
#+BEGIN_SRC elisp
;;;###autoload
(after! org-agenda (setq org-agenda-custom-commands
                         '(
                           ("k" "Today\'s View"
                            ((my-agenda-motto "" nil)
                             (agenda ""
                                     ((org-agenda-overriding-header "Overall Agenda View")
                                      (org-agenda-span 'day)
                                      (org-deadline-warning-days 7)
                                      (org-agenda-start-day
                                       (org-today))
                                      (org-agenda-tag-filter-preset
                                       '("-daytoday"))
                                      (org-agenda-sorting-strategy '(priority-down effort-down))
                                      (org-agenda-current-span 'day))
                                     )
                             (org-time-budgets-in-agenda-maybe)
                             (todo "READING|SUMMARISING"
                                   ((org-agenda-overriding-header "Books I am currently reading and summarizing\n ======================================================\n")))
                             )
                            nil)
                           ("n" "Next tasks"
                            ((todo "NEXT"
                                   ((org-agenda-overriding-header " PROJECT TASKS\n ===================================================================\n")
                                    ))
                             ) nil)
                           ("o" "Monthly Review"
                            ((agenda "" ((org-agenda-span 30)
                                         (org-agenda-overriding-header " Previous Month Deferred and not completed\n ===================================================================\n")
                                         (org-agenda-start-day "-7d")
                                         (org-agenda-entry-types '(:timestamp))
                                         (org-agenda-show-log t)))
                             (agenda "" ((org-agenda-span 30)
                                         (org-agenda-overriding-header " Planned for next month\n ===================================================================\n")
                                         (org-agenda-start-day "+1d")
                                         (org-agenda-entry-types '(:timestamp))))
                             ) nil)
                           ("W" "Weekly Review"
                            ((agenda "" ((org-agenda-span 7)
                                         (org-agenda-overriding-header " Previous Week Deferred and not completed\n ===================================================================\n")
                                         (org-agenda-start-day "-7d")
                                         (org-agenda-entry-types '(:timestamp))
                                         (org-agenda-show-log t)))
                             (agenda "" ((org-agenda-span 7)
                                         (org-agenda-overriding-header " Planned for next week\n ===================================================================\n")
                                         (org-agenda-start-day "-1d")
                                         (org-agenda-entry-types '(:timestamp))
                                         (org-agenda-show-log t)))
                             (todo ""
                                   ((org-agenda-files
                                     '(org-inbox-file))
                                    (org-agenda-overriding-header " Process and refile inbox\n ===================================================================\n")
                                    ))
                             (todo "TOREAD"
                                   ((org-agenda-files
                                     '(org-bookslog-file))
                                    (org-agenda-overriding-header " Do you want to read some new book\n ===========================================================\n")
                                    ))
                             (todo "WAITING"
                                   ((org-agenda-files
                                     '(org-tasks-file))
                                    (org-agenda-overriding-header " Waiting for something else\n ===================================================================\n")
                                    ))
                             (todo ""
                                   ((org-agenda-files
                                     '(org-projects-file))
                                    (org-agenda-overriding-header " Projects Work for Next Week\n ===================================================================\n")
                                    ))
                             (todo ""
                                   ((org-agenda-overriding-header " Process Someday\n ===========================================================\n")
                                    (org-agenda-files
                                     '(org-someday-file))
                                    ))
                             )
                            nil)
                           ("v" "I am bored"
                                        ; Easy tasks
                            ((tags-todo "+Easy"
                                        ((org-agenda-overriding-header " Get over easier things now")
                                         ))
                                        ; Read when bored
                             (tags-todo "+read"
                                        ((org-agenda-files
                                          '(org-bookslog-file))
                                         (org-agenda-overriding-header " Why not read something rather than waste time?"))
                                        )
                                        ; Get entertained
                             (tags-todo "+entertaintment"
                                        ((org-agenda-files
                                          '(org-inbox-file))
                                         (org-agenda-overriding-header " Enjoy some time doing whatever"))
                                        )
                             ))
                           ;; ("w" "Office agenda"
                           ;;              ; Priority A
                           ;;  ((tags-todo "PRIORITY=\"A\"&+office"
                           ;;              ((org-agenda-overriding-header "Priority A")))
                           ;;              ; Due soon
                           ;;   (tags-todo "-PRIORITY=\"A\"&DEADLINE<=\"<+7d>\"&+office"
                           ;;              ((org-agenda-overriding-header "Due soon")))
                           ;;   ))
                           ;; ("l" "Home agenda"
                           ;;              ; Priority A
                           ;;  ((tags-todo "PRIORITY=\"A\"&+home"
                           ;;              ((org-agenda-overriding-header "Priority A")))
                           ;;              ; Due soon
                           ;;   (tags-todo "-PRIORITY=\"A\"&DEADLINE<=\"<+7d>\"&+home"
                           ;;              ((org-agenda-overriding-header "Due soon")))
                           ;;   ))
                           )))
#+END_SRC
*** Color Time Grid based on clocking time
#+BEGIN_SRC elisp
(after! org
(defun my:org-agenda-time-grid-spacing ()
  "Set different line spacing w.r.t. time duration."
  (save-excursion
    (let* ((background (alist-get 'background-mode (frame-parameters)))
           (background-dark-p (string= background "dark"))
           (colors (if background-dark-p
                       (list "#aa557f" "DarkGreen" "DarkSlateGray" "DarkSlateBlue")
                     (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7")))
           pos
           duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors)
                                                :foreground
                                                ,(if background-dark-p "black" "white")))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))
(add-hook 'org-agenda-finalize-hook #'my:org-agenda-time-grid-spacing)
)
#+END_SRC
** Org Latex
#+begin_src elisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities))
  (add-hook 'org-mode-hook 'org-fragtog-mode)
)

#+end_src
** Org-appear: Show fontifying additions to text which is invisible
#+begin_src elisp
(add-hook! 'org-mode-hook #'org-appear-mode)

(after! org
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t)
  ;;(run-at-time nil nil #'org-appear--set-elements)
  )
#+end_src
** Org Export
#+BEGIN_SRC elisp
(after! org
  (setq org-html-head-include-scripts t
        org-export-with-toc t
        org-export-with-author t
        org-export-headline-levels 5
        org-export-with-drawers t
        org-export-with-email t
        org-export-with-footnotes t
        org-export-with-latex t
        org-export-with-section-numbers nil
        org-export-with-properties t
        org-export-with-smart-quotes t
        org-export-backends '(pdf ascii html latex odt pandoc)))
#+END_SRC
** Org Screenshots
#+BEGIN_SRC elisp
(after! org
  (setq org-download-method 'directory
        org-download-image-dir "~/Nextcloud/org/org-images/"
        org-download-heading-lvl nil
        org-download-delete-image-after-download t
        org-download-screenshot-method "/usr/share/sway/scripts/grimshot save area %s"
        org-download-image-org-width 600
        org-download-annotate-function (lambda (link) "") ;; Don't annotate
        )
  ;; org-download-image-dir "~/Nextcloud/org/org-images/"
  ;; org-download-delete-image-after-download t
  (setq org-image-actual-width nil)
  (setq org-download-link-format "[[file:%s]]\n"
        org-download-abbreviate-filename-function #'file-relative-name)
  (setq org-download-link-format-function #'org-download-link-format-function-default)
  (org-download-enable)
  ;; org-attach method
  (setq-default org-attach-method 'mv
                org-attach-auto-tag "attach"
                org-attach-store-link-p 't)
  )
(global-set-key (kbd "<s-print>") 'my-org-download-screenshot)
#+END_SRC
** Org Roam
*** V2 Node Display

#+begin_src elisp
(after! org
  (setq org-roam-directory (file-truename (concat org-directory "notes"))
        org-roam-dailies-directory "daily/")

  (org-roam-setup)

  ;; Attachments removed from org-roam db
  (setq org-roam-db-node-include-function
        (lambda ()
          (or
           (not (cdr  (assoc "NOTER_PAGE" (org-entry-properties))))
           (not (member "ATTACH" (org-get-tags)))
           )))

  ;; Org-roam interface
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the node's TITLE, as well as it's HIERACHY."
    (let* ((title (org-roam-node-title node))
           (olp (mapcar (lambda (s) (if (> (length s) 30) (concat (substring s 0 30)  "...") s)) (org-roam-node-olp node)))
           (level (org-roam-node-level node))
           (filetitle (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
           (shortentitle (if (> (length filetitle) 30) (concat (substring filetitle 0 30)  "...") filetitle))
           (separator (concat " " (nerd-fonts-insert-faicon "nf-fa-chevron_right") " ")))
      (cond
       ((= level 1) (concat (propertize (format "=level:%d=" level) 'display (nerd-icons-faicon "nf-fa-list" :face 'all-the-icons-green)) " "
                            (propertize shortentitle 'face 'org-roam-dim) separator title))
       ((= level 2) (concat (propertize (format "=level:%d=" level) 'display (nerd-icons-faicon "nf-fa-list" :face 'all-the-icons-dpurple)) " "
                            (propertize (concat shortentitle separator (string-join olp separator)) 'face 'org-roam-dim) separator title))
       ((> level 2) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-dsilver)) " "
                            (propertize (concat shortentitle separator (string-join olp separator)) 'face 'org-roam-dim) separator title))
       (t (concat (propertize (format "=level:%d=" level) 'display (nerd-icons-faicon "list" :face 'all-the-icons-yellow)) " " title)))))

  (defconst my/org-roam-special-tags
    '("bibnote" "bookreview" "literaturenote" "default" "abstract" "blog" "person" "creativewriting")
    "Special tags that are unique to each file to represent the note's function.")

  (defconst my/frg-roam-generalnote-tags
    '("beautiful" "idgi" "seed" "readmore" "talkabout" "tmi" "research")
    "Special tags that are unique to each file to represent the note's function.")

  (defconst my/org-roam-ignored-tags
    '("ATTACH")
    "Tags that are ignored when displaying function and other tags.")

  (defun my/org-roam-filtered-tags (node)
    "Return the tags of NODE after filtering out ignored tags."
    (seq-remove (lambda (tag)
                  (member tag my/org-roam-ignored-tags))
                (org-roam-node-tags node)))

  (cl-defmethod org-roam-node-functiontag ((node org-roam-node))
    "Return the FUNCTION TAG for each node."
    (let* ((tags (my/org-roam-filtered-tags node))
           (functiontag (seq-intersection my/org-roam-special-tags tags 'string=)))
      (concat
       (if functiontag
           (propertize "=has:functions=" 'display (nerd-icons-faicon "nf-fa-gear" :face 'all-the-icons-silver :v-adjust 0.02))
         (propertize "=not-functions=" 'display (nerd-icons-faicon "nf-fa-gear" :face 'org-roam-dim :v-adjust 0.02)))
       " " (string-join functiontag ", "))))

  (cl-defmethod org-roam-node-othertags ((node org-roam-node))
    "Return the OTHER TAGS of each notes."
    (let* ((tags (my/org-roam-filtered-tags node))
           (othertags (seq-difference tags my/org-roam-special-tags 'string=)))
      (when othertags
        (concat
         (propertize "=has:tags=" 'display (nerd-icons-faicon "nf-fa-tags" :face 'all-the-icons-dgreen :v-adjust 0.02)) " "
         (propertize (string-join othertags ", ") 'face 'all-the-icons-dgreen)))))

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                          :from links
                          :where (= dest $s1)
                          :and (= type "id")]
                         (org-roam-node-id node)))))
      (if (> count 0)
          (concat (propertize "=has:backlinks=" 'display (nerd-icons-insert-octicon "nf-oct-link" :face 'all-the-icons-dblue)) (format "%d" count))
        (concat (propertize "=not-backlinks=" 'display (nerd-icons-insert-octicon "nf-oct-link" :face 'org-roam-dim))  " "))))

  (defun my/org-roam-compute-tags (node)
    "Compute the function tags and other tags for the given NODE.
Return a list where the first element is the function tags and
the second element is the other tags."
    (let* ((tags (seq-remove (lambda (tag)
                               (member tag my/org-roam-ignored-tags))
                             (org-roam-node-tags node)))
           (functiontags (seq-intersection my/org-roam-special-tags tags 'string=))
           (othertags (seq-difference tags my/org-roam-special-tags 'string=)))
      (list functiontags othertags)))

  (defun org-roam-node-fullformat (node)
    "Return a formatted string containing the title and computed tags for the NODE."
    (let* ((tags (my/org-roam-compute-tags node))
           (functiontag (car tags))
           (othertags (cadr tags))
           (functiontag-str (format "%-15s"
                                    (concat
                                     ;; (if functiontag
                                     ;;     (propertize "=has:functions=" 'display (all-the-icons-octicon "gear" :face 'all-the-icons-silver :v-adjust 0.02))
                                     ;;   (propertize "=not-functions=" 'display (all-the-icons-octicon "gear" :face 'org-roam-dim :v-adjust 0.02)))
                                     " " (string-join functiontag ", "))))
           (othertags-str (when othertags
                            (concat
                             (propertize "=has:tags=" 'display (nerd-icons-faicon "nf-fa-tags" :face 'nerd-icons-dgreen :v-adjust 0.02)) " "
                             (propertize (string-join othertags ", ") 'face 'nerd-icons-dgreen)))))
      (format " %s %s %s" functiontag-str (org-roam-node-title node) (or othertags-str ""))))

  (setq org-roam-node-display-template
        (concat  "${fullformat}"))

  ;; (setq org-roam-node-display-template
  ;;       (concat  "${functiontag:27} ${title} ${othertags}"))



  ;; ;; Keys binding
  (map! :leader
        :prefix "n"
        (:prefix ("r" . "Org-roam")
         :desc "Toggle roam buffer"            "t" #'org-roam-buffer-toggle
         :desc "Refile"                        "r" #'org-roam-refile
         (:prefix ("l" . "Roam Alias")
          :desc "Add alias"                    "a" #'org-roam-alias-add
          :desc "Remove alias"                 "d" #'org-roam-alias-remove)))
  )
#+end_src

#+RESULTS:
: org-roam-alias-remove

*** Org Roam Buffer Sections

#+begin_src elisp
(after! org-roam
  (defun my/org-roam--backlink-files (node)
    "Get the list of files that are already backlinking to NODE."
    (seq-map
     (lambda (backlink)
       (org-roam-node-file (org-roam-backlink-source-node backlink)))
     (org-roam-backlinks-get node)))

  (defun org-roam-unique-unlinked-references-section (node)
    "The unlinked references section for NODE.
   References from files that are already backlinking to NODE are excluded."
    (when (and (executable-find "rg")
               (org-roam-node-title node)
               (not (string-match "PCRE2 is not available"
                                  (shell-command-to-string "rg --pcre2-version"))))
      (let* ((titles (cons (org-roam-node-title node)
                           (org-roam-node-aliases node)))
             (rg-command (concat "rg -L -o --vimgrep -P -i "
                                 (mapconcat (lambda (glob) (concat "-g " glob))
                                            (org-roam--list-files-search-globs org-roam-file-extensions)
                                            " ")
                                 (format " '\\[([^[]]++|(?R))*\\]%s' "
                                         (mapconcat (lambda (title)
                                                      (format "|(\\b%s\\b)" (shell-quote-argument title)))
                                                    titles ""))
                                 org-roam-directory))
             (results (split-string (shell-command-to-string rg-command) "\n"))
             (backlink-files (my/org-roam--backlink-files node))
             f row col match)
        (magit-insert-section (unlinked-references)
          (magit-insert-heading "Unlinked References:")
          (dolist (line results)
            (save-match-data
              (when (string-match org-roam-unlinked-references-result-re line)
                (setq f (match-string 1 line)
                      row (string-to-number (match-string 2 line))
                      col (string-to-number (match-string 3 line))
                      match (match-string 4 line))
                (when (and match
                           (not (file-equal-p (org-roam-node-file node) f))
                           (member (downcase match) (mapcar #'downcase titles))
                           (not (member f backlink-files)))  ; Skip files that are already backlinking
                  (magit-insert-section section (org-roam-grep-section)
                    (oset section file f)
                    (oset section row row)
                    (oset section col col)
                    (insert (propertize (format "%s:%s:%s"
                                                (truncate-string-to-width (file-name-base f) 15 nil nil t)
                                                row col) 'font-lock-face 'org-roam-dim)
                            " "
                            (org-roam-fontify-like-in-org-mode
                             (org-roam-unlinked-references-preview-line f row))
                            "\n"))))))
          (insert ?\n)))))

  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unique-unlinked-references-section
              ))
  )
#+end_src
*** Org Roam Log Notes Saving

#+begin_src elisp
(defun log-org-roam-file-save ()
  "Log the saving of an Org-roam file."
  (when (and (eq major-mode 'org-mode)
             (string-prefix-p (expand-file-name org-roam-directory) (expand-file-name buffer-file-name)))
    (let ((log-file org-roam-logs-file)
          (current-time (format-time-string "[%Y-%m-%d %H:%M:%S]"))
          (file-name (buffer-file-name)))
      (with-temp-buffer
        (insert (format "%s Saved file: %s\n" current-time file-name))
        (append-to-file (point-min) (point-max) log-file)))))

(add-hook 'after-save-hook #'log-org-roam-file-save)
#+end_src

*** Capture Templates
#+BEGIN_SRC elisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "Default" plain "%?"
   :if-new (file+head "${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: :default:
")
           :immediate-finish t)

          ("r" "Default but open buffer" plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS:
")
           :unnarrowed t)

          ("t" "Tagged" plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: %^G
")
           :unnarrowed t)

          ("o" "Abstract ON Note " plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: :abstract:
")
           :unnarrowed t)

          ("l" "Literature Note " plain "%?"
           :if-new (file+head "ln_${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: :literaturenote:%^{definition|theory|course|video|article|library|subject|chapter|topic|research}:%^G
,#+REF_URL:
")
           :unnarrowed t)

          ("b" "Book Review " plain "%?"
           :if-new (file+head "ln_${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: :bookreview:
")
           :unnarrowed t)

          ("c" "Composition" plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: :composition:
")
           :unnarrowed t)

          ;; TODO Manage it later
          ;;           ("m" "Meeting Notes" plain "%?"
          ;;            :if-new (file+head "meet_${slug}.org"
          ;;                               "#+TITLE: ${title}
          ;; #+CREATED_DATE: %T
          ;; #+filetags: :meeting:
          ;; #+ATTENDEES: %^{Attendees}
          ;; #+LOCATION: %^{Location}
          ;; #+START_TIME: %^{Start Time}
          ;; #+END_TIME: %^{End Time}
          ;; ")
          ;;            :unnarrowed t)

          ("p" "Person" plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+TITLE: ${title}
,#+FILETAGS: :person:
")
           :unnarrowed t)

          ;; Org roam bibtex template
          ("r" "Bibliography Reference" plain
           (file (concat org-templates-directory "orbreftemplate.org"))
           :if-new
           (file+head "papers/${citekey}.org"
                      "#+title: ${title}
,#+FILETAGS: :bibnote:
")
           :unnarrowed t)

          ;; Use this field if necessary #+EXPORT_FILE_NAME: %^{export name}
          ("h" "Blog Post" plain
           "%?"
           :if-new (file+head "blogs/%<%Y%m%d%H%M%S>-${slug}.org" "#+SETUPFILE:../hugo_in_setup.org
,#+HUGO_SECTION: ${ai|emacs|neuroscience}
,#+HUGO_SLUG: ${slug}
,#+HUGO_TAGS:
,#+HUGO_CATEGORIES:
,#+HUGO_DRAFT: false\n
,#+AUTHOR: Alok Regmi
,#+FILETAGS: :blog:${filetags}\n
,#+TITLE: ${title}
")
           :unnarrowed t)

          ;;           ("j" "paper-description" plain "* Main Contribution \n\n* Your description of significance \n\n* New algorithm or principles\n\n* Simulation Results and Comparisons\n\n* Solid Conclusion"
          ;;            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
          ;;                               "#+title: ${title}\n#+filetags: paper")
          ;;            :unnarrowed t)

          ;;           ("e" "ref" plain "%?"
          ;;            :if-new (file+head "websites/${slug}.org" "#+SETUPFILE:./hugo_in_setup.org
          ;; ,#+ROAM_KEY: ${ref}#+TITLE: ${title}\n- source :: ${ref}")
          ;;            :unnarrowed t)

          ("k" "private" plain
           "%?" :if-new (file+head "private-${slug}.org"
                                   "#+TITLE: ${title}\n
,#+FILETAGS: %^G
")
           :unnarrowed t)

          ("w" "webref" entry "* ${title} ([[${ref}][${hostname}]])\n%?"
           :if-new
           (file+head (concat org-roam-dailies-directory "%<%Y-%m-%d>.org")
                      "#+title: %<%Y-%m-%d %a>
,#+FILETAGS: journal
,#+STARTUP: overview
")
           :unnarrowed t)
          ))

  (defun my/org-roam-set-created ()
    "Set a CREATED property in the current Org-roam node."
    (when (and (org-roam-buffer-p)
               (not (org-entry-get (point) "CREATED")))
      (org-set-property "CREATED" (format-time-string "[%Y-%m-%d %a %H:%M]"))))

  (add-hook 'org-roam-capture-new-node-hook #'my/org-roam-set-created)
  )

#+END_SRC

*** Org Roam UI
#+begin_src elisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  :hook (org-roam . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

*** Org Roam v2 Frame Title
#+begin_src elisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

*** Roam File Search
#+begin_src elisp
;;;###autoload
(defun bms/org-roam-rg-search ()
  "Search org-roam directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
    (consult-ripgrep org-roam-directory)))
(global-set-key (kbd "C-M-s-o") 'bms/org-roam-rg-search)
#+end_src

*** Org Export jupyter python blocks to python for hugo
Rename jupyter-python to python for hugo text block syntax highlighting for python code blocks present in org file.
#+begin_src elisp
(after! org
(defun jupyter-python-to-only-python (text backend info)
  "Replace jupyter-python src blocks with python blocks."
  (replace-regexp-in-string "```jupyter-python" "```python" text))
(add-hook 'org-export-filter-src-block-functions #'jupyter-python-to-only-python))
#+end_src


*** Task to Org Note
#+begin_src elisp
(defun my/convert-task-to-org-note ()
  "Convert a task in a `org-roam' note."
  (interactive)
  (let* ((heading (org-get-heading t t t t))
         (body (org-get-entry))
         (link (format "[[id:%s][%s]]" (org-id-get-create) heading))
         (filepath (on/make-filepath heading (current-time))))
    (on/insert-org-roam-file
     filepath
     heading
     nil
     (list link)
     (format "* Note stored from tasks\n%s" body)
     nil)
    (find-file filepath)))
#+end_src
*** Org Roam Search

#+begin_src emacs-lisp
(defun my-org-roam-search (phrase)
  (interactive "sSearch phrase: ")
  (let* ((cmd (format "rg --with-filename --line-number --column --no-heading --color=never -i '%s' %s"
                      phrase org-roam-directory))
         (results (split-string (shell-command-to-string cmd) "\n" t))
         (current-file nil)
         (buffer-name (generate-new-buffer-name "*org-roam-search*")))
    (with-current-buffer (get-buffer-create buffer-name)
      (erase-buffer)
      (dolist (line results)
        (let* ((parts (split-string line ":"))
               (file (nth 0 parts))
               (linum (string-to-number (nth 1 parts)))
               (content (string-join (nthcdr 3 parts) ":"))
               (id (with-temp-buffer
                     (insert-file-contents file)
                     (goto-char (point-min))
                     (when (re-search-forward "^:ID:[ \t]+\\(.*\\)" nil t)
                       (match-string-no-properties 1)))))
          (when (and id (not (equal current-file file)))
            (setq current-file file)
            (insert (format "\n* File: [[id:%s][%s]]\n" id (file-name-nondirectory file)))
            (insert (make-string (+ 9 (length (file-name-nondirectory file))) ?-))
            (insert "\n"))
          (when id
            (insert (format "- [[file:%s::%d][%4d]]: %s\n" file linum linum content)))))
      (switch-to-buffer-other-window buffer-name)
      (goto-char (point-min))
      (org-mode)
      (read-only-mode 1))))

(defun my-org-open-at-point-in-right-split ()
  (interactive)
  (let ((path (get-text-property (point) 'path))
        (type (get-text-property (point) 'type)))
    (when (string-equal type "file")
      (let* ((file (file-truename (car path)))
             (line (string-to-number (cadr path))))
        (split-window-right)
        (other-window 1)
        (find-file file)
        (goto-char (point-min))
        (forward-line (1- line))))))

#+end_src

#+RESULTS:
: my-org-open-at-point-in-right-split
*** Org Roam Quick Insert Link

#+begin_src emacs-lisp
(defun insert-org-roam-link ()
  "Insert a Roam link and place the cursor next to the colon.
   If in Evil normal mode, switch to insert mode."
  (interactive)
  (if (and (bound-and-true-p evil-mode)
           (eq evil-state 'normal))
      (evil-insert-state)) ; Switch to insert mode if in normal mode
  (insert "[[roam:")
  (save-excursion
    (insert "]]")))
#+end_src
** Email Mu4e
#+begin_src elisp
(set-email-account! "campus"
                    '((mu4e-sent-folder       . "/pulchowk/Sent Mail")
                      (mu4e-drafts-folder     . "/pulchowk/Drafts")
                      (mu4e-trash-folder      . "/pulchowk/Trash")
                      (mu4e-refile-folder     . "/pulchowk/All Mail")
                      (smtpmail-smtp-user     . "072bex403.alok@pcampus.edu.np")
                      (user-mail-address      . "072bex403.alok@pcampus.edu.np")
                      (mu4e-compose-signature . "---\nAlok Regmi\n Pulchowk Campus, Lalitpur, Nepal"))
                    t)

(set-email-account! "personal"
                    '((mu4e-sent-folder       . "/personal/Sent Mail")
                      (mu4e-drafts-folder     . "/personal/Drafts")
                      (mu4e-trash-folder      . "/personal/Trash")
                      (mu4e-refile-folder     . "/personal/All Mail")
                      (smtpmail-smtp-user     . "sagar.r.alok@gmail.com")
                      (user-mail-address      . "sagar.r.alok@gmail.com")
                      (mu4e-compose-signature . "---\nAlok Regmi"))
                    t)
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src

** Org Regions Markup [Scimax]
#+BEGIN_SRC elisp
(after! org
  (defun org-markup-region-or-point (type beginning-marker end-marker)
    "Apply the markup TYPE with BEGINNING-MARKER and END-MARKER to region, word or point.
This is a generic function used to apply markups. It is mostly
the same for the markups, but there are some special cases for
subscripts and superscripts."
    (cond
     ;; We have an active region we want to apply
     ((region-active-p)
      (let* ((bounds (list (region-beginning) (region-end)))
             (start (apply 'min bounds))
             (end (apply 'max bounds))
             (lines))
        (unless (memq type '(subscript superscript))
          (save-excursion
            (goto-char start)
            (unless (looking-at " \\|\\<")
              (backward-word)
              (setq start (point)))
            (goto-char end)
            (unless (or (looking-at " \\|\\>")
                        (looking-back "\\>" 1))
              (forward-word)
              (setq end (point)))))
        (setq lines
              (s-join "\n" (mapcar
                            (lambda (s)
                              (if (not (string= (s-trim s) ""))
                                  (concat beginning-marker
                                          (s-trim s)
                                          end-marker)
                                s))
                            (split-string
                             (buffer-substring start end) "\n"))))
        (setf (buffer-substring start end) lines)
        (forward-char (length lines))))
     ;; We are on a word with no region selected
     ((thing-at-point 'word)
      (cond
       ;; beginning of a word
       ((looking-back " " 1)
        (insert beginning-marker)
        (re-search-forward "\\>")
        (insert end-marker))
       ;; end of a word
       ((looking-back "\\>" 1)
        (insert (concat beginning-marker end-marker))
        (backward-char (length end-marker)))
       ;; not at start or end so we just sub/sup the character at point
       ((memq type '(subscript superscript))
        (insert beginning-marker)
        (forward-char (- (length beginning-marker) 1))
        (insert end-marker))
       ;; somewhere else in a word and handled sub/sup. mark up the
       ;; whole word.
       (t
        (re-search-backward "\\<")
        (insert beginning-marker)
        (re-search-forward "\\>")
        (insert end-marker))))
     ;; not at a word or region insert markers and put point between
     ;; them.
     (t
      (insert (concat beginning-marker end-marker))
      (backward-char (length end-marker)))))


  (defun org-italics-region-or-point ()
    "Italicize the region, word or character at point.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'italics "/" "/"))


  (defun org-bold-region-or-point ()
    "Bold the region, word or character at point.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'bold "*" "*"))


  (defun org-underline-region-or-point ()
    "Underline the region, word or character at point.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'underline "_" "_"))


  (defun org-code-region-or-point ()
    "Mark the region, word or character at point as code.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'underline "~" "~"))


  (defun org-verbatim-region-or-point ()
    "Mark the region, word or character at point as verbatim.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'underline "=" "="))


  (defun org-strikethrough-region-or-point ()
    "Mark the region, word or character at point as strikethrough.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'strikethrough "+" "+"))


  (defun org-subscript-region-or-point ()
    "Mark the region, word or character at point as a subscript.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'subscript "_{" "}"))

  (defun org-superscript-region-or-point ()
    "Mark the region, word or character at point as superscript.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
    (interactive)
    (org-markup-region-or-point 'superscript "^{" "}"))

  (defun org-latex-math-region-or-point (&optional arg)
    "Wrap the selected region in latex math markup.
\(\) or $$ (with prefix ARG) or @@latex:@@ with double prefix.
With no region selected, insert those and put point in the middle
to add an equation. Finally, if you are between these markers
then exit them."
    (interactive "P")
    (if (memq 'org-latex-and-related (get-char-property (point) 'face))
        ;; in a fragment, let's get out.
        (goto-char (or (next-single-property-change (point) 'face) (line-end-position)))
      (let ((chars
             (cond
              ((null arg)
               '("\\(" . "\\)"))
              ((equal arg '(4))
               '("$" . "$"))
              ((equal arg '(16))
               '("@@latex:" . "@@")))))
        (if (region-active-p)
            ;; wrap region
            (progn
              (goto-char (region-end))
              (insert (cdr chars))
              (goto-char (region-beginning))
              (insert (car chars)))
          (cond
           ((thing-at-point 'word)
            (save-excursion
              (end-of-thing 'word)
              (insert (cdr chars)))
            (save-excursion
              (beginning-of-thing 'word)
              (insert (car chars)))
            (forward-char (length (car chars))))
           (t
            (insert (concat  (car chars) (cdr chars)))
            (backward-char (length (cdr chars))))))))))
#+END_SRC

** A more general <Enter> key

So you want your return to be intelligent: Kitchin to the rescue.
#+BEGIN_SRC elisp
(after! org
  (defun unpackaged/org-element-descendant-of (type element)
    "Return non-nil if ELEMENT is a descendant of TYPE.
TYPE should be an element type, like `item' or `paragraph'.
ELEMENT should be a list like that returned by `org-element-context'."
    ;; MAYBE: Use `org-element-lineage'.
    (when-let* ((parent (org-element-property :parent element)))
      (or (eq type (car parent))
          (unpackaged/org-element-descendant-of type parent))))

;;;###autoload
  (defun unpackaged/org-return-dwim (&optional default)
    "A helpful replacement for `org-return-indent'.  With prefix, call `org-return-indent'.

On headings, move point to position after entry content.  In
lists, insert a new item or end the list, with checkbox if
appropriate.  In tables, insert a new row or end the table."
    ;; Inspired by John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
    (interactive "P")
    (if default
        (org-return t)
      (cond
       ;; Act depending on context around point.

       ;; NOTE: I prefer RET to not follow links, but by uncommenting this block, links will be
       ;; followed.

       ;; ((eq 'link (car (org-element-context)))
       ;;  ;; Link: Open it.
       ;;  (org-open-at-point-global))

       ((org-at-heading-p)
        ;; Heading: Move to position after entry content.
        ;; NOTE: This is probably the most interesting feature of this function.
        (let ((heading-start (org-entry-beginning-position)))
          (goto-char (org-entry-end-position))
          (cond ((and (org-at-heading-p)
                      (= heading-start (org-entry-beginning-position)))
                 ;; Entry ends on its heading; add newline after
                 (end-of-line)
                 (insert "\n\n"))
                (t
                 ;; Entry ends after its heading; back up
                 (forward-line -1)
                 (end-of-line)
                 (when (org-at-heading-p)
                   ;; At the same heading
                   (forward-line)
                   (insert "\n")
                   (forward-line -1))
                 ;; FIXME: looking-back is supposed to be called with more arguments.
                 (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                   (insert "\n"))
                 (forward-line -1)))))

       ((org-at-item-checkbox-p)
        ;; Checkbox: Insert new item with checkbox.
        (org-insert-todo-heading nil))

       ((org-in-item-p)
        ;; Plain list.  Yes, this gets a little complicated...
        (let ((context (org-element-context)))
          (if (or (eq 'plain-list (car context))  ; First item in list
                  (and (eq 'item (car context))
                       (not (eq (org-element-property :contents-begin context)
                                (org-element-property :contents-end context))))
                  (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
              ;; Non-empty item: Add new item.
              (org-insert-item)
            ;; Empty item: Close the list.
            ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
            (delete-region (line-beginning-position) (line-end-position))
            (insert "\n"))))

       ((when (fboundp 'org-inlinetask-in-task-p)
          (org-inlinetask-in-task-p))
        ;; Inline task: Don't insert a new heading.
        (org-return t))

       ((org-at-table-p)
        (cond ((save-excursion
                 (beginning-of-line)
                 ;; See `org-table-next-field'.
                 (cl-loop with end = (line-end-position)
                          for cell = (org-element-table-cell-parser)
                          always (equal (org-element-property :contents-begin cell)
                                        (org-element-property :contents-end cell))
                          while (re-search-forward "|" end t)))
               ;; Empty row: end the table.
               (delete-region (line-beginning-position) (line-end-position))
               (org-return t))
              (t
               ;; Non-empty row: call `org-return-indent'.
               (org-return t))))
       (t
        ;; All other cases: call `org-return-indent'.
        (org-return t)))))

  (map!
   :after evil-org
   :map evil-org-mode-map
   :i [return] #'unpackaged/org-return-dwim)

  ;; (map! :map org-mode-map
  ;;       :desc "Org Return DWIM" "RET" #'unpackaged/org-return-dwim)

  )
#+END_SRC
** Hydras for Org Mode [ Scimax ]
#+BEGIN_SRC elisp
(after! org

  (defhydra +org-private@org-babel-hydra (:color pink :hint nil)
    "
Org-Babel: _j_/_k_ next/prev   _g_oto     _TAB_/_i_/_I_ show/hide
           _'_ edit   _c_lear result      _e_xecute     _s_plit"
    ("c" org-babel-remove-result)
    ("e" org-babel-execute-src-block)
    ("'" org-edit-src-code)
    ("TAB" org-hide-block-toggle-maybe)
    ("s" org-babel-demarcate-block)
    ("g" org-babel-goto-named-src-block)
    ("i" org-show-block-all)
    ("I" org-hide-block-all)
    ("j" org-babel-next-src-block)
    ("k" org-babel-previous-src-block)
    ("q" nil "cancel" :color blue))


  (defhydra scimax-org-table (:color red :hint nil  )
    "
org table
_ic_: insert column    _M-<left>_: move col left    _d_: edit field
_dc_: delete colum     _M-<right>_: move col right  _e_: eval formula
_ir_: insert row       _M-<up>_: move row up        _E_: export table
_ic_: delete row       _M-<down>_: move row down    _r_: recalculate
_i-_: insert line      _w_: wrap region             _I_: org-table-iterate
_-_: insert line/move  ^ ^                          _D_: formula debugger
_s_ort  _t_ranspose _m_ark
_<_: beginning of table _>_: end of table
"
    ("ic" org-table-insert-column)
    ("ir" org-table-insert-row)
    ("dc" org-table-delete-column)
    ("dr" org-table-kill-row)
    ("i-" org-table-insert-hline)
    ("-" org-table-hline-and-move)

    ("d" org-table-edit-field)
    ("e" org-table-eval-formula)
    ("E" org-table-export :color blue)
    ("r" org-table-recalculate)
    ("I" org-table-iterate)
    ("B" org-table-iterate-buffer-tables)
    ("w" org-table-wrap-region)
    ("D" org-table-toggle-formula-debugger)

    ("M-<up>" org-table-move-row-up)
    ("M-<down>" org-table-move-row-down)
    ("M-<left>" org-table-move-column-left)
    ("M-<right>" org-table-move-column-right)
    ("t" org-table-transpose-table-at-point)

    ("m" (progn (goto-char (org-table-begin))
                (org-mark-element)))
    ("s" org-table-sort-lines)
    ("<" (goto-char (org-table-begin)))
    (">" (progn (goto-char (org-table-begin))
                (goto-char (org-element-property :end (org-element-context))))))



  (defhydra scimax-org-headline (:color red :hint nil  )
    "
org headline
Navigation               Organize         insert
--------------------------------------------------------------------------------------------------------------------
_n_ext heading           _mu_: move up    _ip_: set property    _s_: narrow subtree _I_: clock in   _,_: priority
_p_revious heading       _md_: move down  _dp_: delete property _w_: widen          _O_: clock out  _0_: rm priority
_f_: forward same level  _mr_: demote     _it_: tag             _r_: refile         _e_: set effort _1_: A
_b_: back same level     _ml_: promote    _t_: todo             _mm_: mark           _E_: inc effort _2_: B
_j_ump to heading        _ih_: insert hl  _id_: deadline        _=_: columns        ^ ^             _3_: C
_F_: next block          _a_: archive     _is_: schedule
_B_: previous block      _S_: sort        _v_: agenda           _/_: sparse tree
"

    ;; Navigation
    ("n" org-next-visible-heading)
    ("p" org-previous-visible-heading)
    ("f" org-forward-heading-same-level)
    ("b" org-backward-heading-same-level)
    ("j" org-goto)
    ("F" org-next-block)
    ("B" org-previous-block)
    ("a" org-archive-subtree-default-with-confirmation)
    ("ih" org-insert-heading)
    ("S" org-sort)
    ("mm" org-mark-subtree)

    ;; organization
    ("mu" org-move-subtree-up)
    ("md" org-move-subtree-down)
    ("mr" org-demote-subtree)
    ("ml" org-promote-subtree)

    ("ip" org-set-property)
    ("dp" org-delete-property)
    ("id" org-deadline)
    ("is" org-schedule)
    ("t" org-todo)
    ("it" org-set-tags)
    ("<tab>" org-cycle)

    ("r" org-refile)
    ("#" org-toggle-comment)
    ("s" org-narrow-to-subtree)
    ("w" widen)
    ("=" org-columns)

    ("I" org-clock-in)
    ("O" org-clock-out)
    ("e" org-set-effort)
    ("E" org-inc-effort)
    ("," org-priority)
    ("0" (org-priority 32))
    ("1" (org-priority 65))
    ("2" (org-priority 66))
    ("3" (org-priority 67))

    ;; misc
    ("v" org-agenda)
    ("/" org-sparse-tree)))

#+END_SRC
** Python Org Source Blocks
#+BEGIN_SRC elisp

(after! org

;;;###autoload
  (defhydra scimax-python-mode (:color red :hint nil  )
    "
Python helper
_a_: begin def/class  _w_: move up   _x_: syntax    _Sb_: send buffer
_e_: end def/class    _s_: move down _n_: next err  _Ss_: switch shell
_<_: dedent line      ^ ^            _p_: prev err
_>_: indent line
_j_: jump to
_._: goto definition
_t_: run tests _m_: magit  _8_: autopep8
"
    ("a" beginning-of-defun)
    ("e" end-of-defun)
    ("<" python-indent-shift-left)
    (">" python-indent-shift-right)
    ("j" counsel-imenu)

    ("t" elpy-test)
    ("." elpy-goto-definition)
    ("x" elpy-check)
    ("n" elpy-flymake-next-error)
    ("p" elpy-flymake-previous-error)

    ("m" magit-status)

    ("w" elpy-nav-move-line-or-region-up)
    ("s" elpy-nav-move-line-or-region-down)

    ("Sb" elpy-shell-send-region-or-buffer)
    ("Ss" elpy-shell-switch-to-shell)

    ("8" autopep8))


  (defun autopep8 ()
    "Replace Python code block contents with autopep8 corrected code."
    (interactive)
    (unless (executable-find "autopep8")
      (if (executable-find "pip")
          (shell-command "python -c \"import pip; pip.main(['install','autopep8'])\"")
        (shell-command "python -c \"from setuptools.command import easy_install; easy_install.main(['-U','autopep8'])\"")))
    (let* ((src (org-element-context))
           (beg (org-element-property :begin src))
           (value (org-element-property :value src)))
      (save-excursion
        (goto-char beg)
        (search-forward value)
        (shell-command-on-region
         (match-beginning 0)
         (match-end 0)
         "autopep8 -a -a -" nil t))))


  ;; * pylint
  (defvar pylint-options
    '()
    "List of options to use with pylint.")

  (setq pylint-options
        '("-r no "			 ; no reports
          ;; we are not usually writing programs where it
          ;; makes sense to be too formal on variable
          ;; names.
          "--disable=invalid-name "
          ;; don't usually have modules, which triggers
          ;; this when there is not string at the top
          "--disable=missing-docstring "
          ;; superfluous-parens is raised with print(),
          ;; which I am promoting for python3
          ;; compatibility.
          "--disable=superfluous-parens "	;

          ;; these do not seem important for my work.
          "--disable=too-many-locals "	;

          ;; this is raised in solving odes and is
          ;; unimportant for us.
          "--disable=unused-argument "	;
          "--disable=unused-wildcard-import "
          "--disable=redefined-outer-name "
          ;; this is triggered a lot from fsolve
          "--disable=unbalanced-tuple-unpacking "
          "--disable=wildcard-import "
          "--disable=redefined-builtin "
          ;; I dont mind semicolon separated lines
          "--disable=multiple-statements "
          ;; pylint picks up np.linspace as a no-member error. That does not make sense.
          "--disable=no-member "
          "--disable=wrong-import-order "
          "--disable=unused-import "))

  (defun pylint ()
    "Run pylint on a source block.
Opens a buffer with links to what is found. This function installs pylint if needed."
    (interactive)
    (let ((eop (org-element-at-point))
          (temporary-file-directory ".")
          (cb (current-buffer))
          (n) ; for line number
          (cn) ; column number
          (content) ; error on line
          (pb "*pylint*")
          (link)
          (tempfile))

      (unless (executable-find "pylint")
        (if (executable-find "pip")
            (shell-command "python -c \"import pip; pip.main(['install','pylint'])\"")
          (shell-command "python -c \"from setuptools.command import easy_install; easy_install.main(['pylint'])\"")))

      ;; rm buffer if it exists
      (when (get-buffer pb) (kill-buffer pb))

      ;; only run if in a python code-block
      (when (and (eq 'src-block (car eop))
                 (string= "python" (org-element-property :language eop)))

        ;; tempfile for the code
        (setq tempfile (make-temp-file "org-py-check" nil ".py"))
        ;; create code file
        (with-temp-file tempfile
          (insert (org-element-property :value eop)))

        ;; pylint
        (let ((status (shell-command
                       (concat
                        "pylint "
                        (mapconcat 'identity pylint-options " ")
                        " "
                        ;; this is the file to check.
                        (file-name-nondirectory tempfile))))

              ;; remove empty strings
              (output (delete "" (split-string
                                  (with-current-buffer "*Shell Command Output*"
                                    (buffer-string)) "\n"))))

          ;; also remove this line so the output is empty if nothing
          ;; comes up
          (setq output (delete
                        "No config file found, using default configuration"
                        output))

          (kill-buffer "*Shell Command Output*")
          (if output
              (progn
                (set-buffer (get-buffer-create pb))
                (insert (format "\n\n* pylint (status = %s)\n" status))
                (insert "pylint checks your code for errors, style and convention. Click on the links to jump to each line.
")

                (dolist (line output)
                  ;; pylint gives a line and column number
                  (if
                      (string-match "[A-Z]:\\s-+\\([0-9]*\\),\\s-*\\([0-9]*\\):\\(.*\\)"
                                    line)
                      (let ((line-number (match-string 1 line))
                            (column-number (match-string 2 line))
                            (content (match-string 3 line)))

                        (setq link (format "[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s)(forward-line 0)(forward-char %s))][%s]]\n"
                                           cb
                                           (org-element-property :begin eop)
                                           line-number
                                           column-number
                                           line)))
                    ;; no match, just insert line
                    (setq link (concat line "\n")))
                  (insert link)))
            (message "pylint was clean!")))

        (when (get-buffer pb)
          ;; open the buffer
          (switch-to-buffer-other-window pb)
          (goto-char (point-min))
          (insert "Press q to close the window\n")
          (org-mode)
          (org-cycle '(64))  ; open everything
          ;; make read-only and press q to quit
          (setq buffer-read-only t)
          (use-local-map (copy-keymap org-mode-map))
          (local-set-key "q" #'(lambda () (interactive) (kill-buffer)))
          (switch-to-buffer-other-window cb))
        ;; final cleanup and delete file
        (delete-file tempfile))))
)
#+END_SRC
** Outline Numbers in Source Blocks
#+BEGIN_SRC elisp
(after! org
  (defun unpackaged/org-outline-numbers (&optional remove-p)
  "Add outline number overlays to the current buffer.
When REMOVE-P is non-nil (interactively, with prefix), remove
them.  Overlays are not automatically updated when the outline
structure changes."
  ;; NOTE: This does not necessarily play nicely with org-indent-mode
  ;; or org-bullets, but it probably wouldn't be too hard to fix that.
  (interactive (list current-prefix-arg))
  (cl-labels ((heading-number ()
               (or (when-let ((num (previous-sibling-number)))
                     (1+ num))
                   1))
              (previous-sibling-number ()
               (save-excursion
                 (let ((pos (point)))
                   (org-backward-heading-same-level 1)
                   (when (/= pos (point))
                     (heading-number)))))
              (number-list ()
               (let ((ancestor-numbers (save-excursion
                                         (cl-loop while (org-up-heading-safe)
                                                  collect (heading-number)))))
                 (nreverse (cons (heading-number) ancestor-numbers))))
              (add-overlay ()
               (let* ((ov-length (org-current-level))
                      (ov (make-overlay (point) (+ (point) ov-length)))
                      (ov-string (concat (mapconcat #'number-to-string (number-list) ".")
                                         ".")))
                 (overlay-put ov 'org-outline-numbers t)
                 (overlay-put ov 'display ov-string))))
    (remove-overlays nil nil 'org-outline-numbers t)
    (unless remove-p
      (org-with-wide-buffer
       (goto-char (point-min))
       (when (org-before-first-heading-p)
         (outline-next-heading))
       (cl-loop do (add-overlay)
                while (outline-next-heading))))))
)
#+END_SRC
** Ob Jupyter
*** Popup rules
#+BEGIN_SRC elisp
(set-popup-rule! "*jupyter-pager*" :side 'right :size .40 :select t :vslot 2 :ttl 3)
(set-popup-rule! "^\\*Org Src*" :side 'right :size .60 :select t :vslot 2 :ttl 3 :quit nil)
(set-popup-rule! "*jupyter-repl*" :side 'bottom :size .30 :vslot 2 :ttl 3)
#+END_SRC
*** Eval region jupyter
#+BEGIN_SRC elisp
(after! jupyter
  (set-eval-handler! 'jupyter-repl-interaction-mode #'jupyter-eval-line-or-region))
#+END_SRC
*** Eval on python mode as well
#+BEGIN_SRC elisp
;; on scratch buffer first run jupyter-associate-buffer
(add-hook! python-mode
  (set-repl-handler! 'python-mode #'jupyter-repl-pop-to-buffer))
#+END_SRC

** Convert org-download links to normal org mode links
#+begin_src elisp
(after! org
  (defun cpb/convert-attachment-to-file ()
    "Convert attachment type link to file type link"
    (interactive)
    (let ((elem (org-element-context)))
      (if (eq (car elem) 'link)
          (let ((type (org-element-property :type elem)))
            ;; only translate attachment type links
            (when (string= type "attachment")
              ;; translate attachment path to relative filename using org-attach API
              ;; 2020-11-15: org-attach-export-link was removed, so had to rewrite
              (let* ((link-end (org-element-property :end elem))
                     (link-begin (org-element-property :begin elem))
                     ;; :path is everything after attachment:
                     (file (org-element-property :path elem))
                     ;; expand that to the full filename
                     (fullpath (org-attach-expand file))
                     ;; then make it relative to the directory of this org file
                     (current-dir (file-name-directory (or default-directory
                                                           buffer-file-name)))
                     (relpath (file-relative-name fullpath current-dir)))
                ;; delete the existing link
                (delete-region link-begin link-end)
                ;; replace with file: link and file: description
                (insert (format "[[file:%s][file:%s]]" relpath relpath)))))))))
#+end_src
** Latex pdf process

#+begin_src elisp
(setq org-latex-pdf-process '("LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src
** Lsp org

#+begin_src elisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src
** Indent quote sections

#+begin_src elisp
;; Inspired from https://emacs.stackexchange.com/questions/38570/org-mode-quote-block-indentation-highlighting
(add-hook 'org-font-lock-hook #'aj/org-indent-quotes)

(defun aj/org-indent-quotes (limit)
           (let ((case-fold-search t))
             (while (search-forward-regexp "^[ \t]*#\\+begin_quote" limit t)
               (let ((beg (1+ (match-end 0))))
                 ;; on purpose, we look further than LIMIT
                 (when (search-forward-regexp "^[ \t]*#\\+end_quote" nil t)
                   (let ((end (1- (match-beginning 0)))
                         (indent (propertize "    " 'face 'org-hide)))
                     (add-text-properties beg end (list 'line-prefix indent
                                                        'wrap-prefix indent))))))))
#+end_src
** Replace jibberish characters

#+begin_src emacs-lisp

(defun replace-jibberish-chars ()
  (interactive)
  (let ((replacements '((?\220 . " ")
                        (?\221 . "`")
                        (?\222 . "'")
                        (?\223 . "\"")
                        (?\224 . "\"")
                        (?\225 . "* ")
                        (?\226 . "--")
                        (?  . " ")
                        (?\227 . " -- "))))
    (save-excursion
      (dolist (pair replacements)
        (goto-char (point-min))
        (while (search-forward (char-to-string (car pair)) nil t)
          (replace-match (cdr pair) nil t))))))
#+end_src
** Time stamp on notes

#+begin_src emacs-lisp
(require 'time-stamp)
(add-hook 'write-file-functions 'time-stamp) ; update when saving
#+end_src
** Export quote blocks

#+begin_src elisp
;; (after! org
;; (defun custom-quote-export-filter (text backend info)
;;   "Custom export filter for quotes with properties."
;;   (when (org-export-derived-backend-p backend 'md) ; checks if the backend is markdown
;;     (let ((quote-pattern "^#\\+BEGIN_QUOTE\n\\(.*?\\)\n#\\+END_QUOTE")
;;           (properties-pattern ":PROPERTIES:\n:PAGE: \\([0-9]+\\)\n:TIMESTAMP: \\(.*?\\)\n:AUTHOR: \\(.*?\\)\n:END:"))
;;       (if (and (string-match quote-pattern text)
;;                (string-match properties-pattern text))
;;           (let ((quote-text (match-string 1 text))
;;                 (page (match-string 1 text))
;;                 (timestamp (match-string 2 text))
;;                 (author (match-string 3 text)))
;;             (format "<div class='quote'>%s</div><div class='author'>- %s</div><div class='page'>Page: %s</div><div class='timestamp'>%s</div>"
;;                     quote-text author page timestamp))
;;         text))))
;; (add-to-list 'org-export-filter-plain-text-functions
;;              'custom-quote-export-filter))
#+end_src

** Fancy Priorities

#+begin_src elisp
(use-package! org-fancy-priorities ; priority icons
  :hook (org-mode . org-fancy-priorities-mode)
  :hook (org-agenda-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list
        `(
          (?A ,(concat " " (nerd-icons-mdicon "nf-md-pulse" :height 1.2) " "))
          (?B ,(concat " " (nerd-icons-mdicon "nf-md-telescope" :height 1.2) " "))
          (?C ,(concat " " (nerd-icons-mdicon "nf-md-fire" :height 1.2) " "))
          (?D ,(concat " " (nerd-icons-mdicon "nf-md-database_search_outline" :height 1.2) " "))
          )
        )
  )
#+end_src
** Energy Log throughout the day

#+begin_src emacs-lisp
(defvar my-log-energy-active nil
  "Flag to indicate whether the energy logging prompt is active.")

(defvar my-log-energy-timer nil
  "Timer for scheduling the energy logging prompt.")

(defun my-log-energy ()
  "Prompt for an energy level and log it with timestamp to a CSV file."
  (interactive)
  ;; Cancel the existing timer
  (when my-log-energy-timer
    (cancel-timer my-log-energy-timer)
    (setq my-log-energy-timer nil))
  ;; Check if the prompt is already active, if so, exit the function
  (if my-log-energy-active
      (message "Energy level prompt already active.")
    ;; If the prompt is not active, proceed and set the flag to true
    (setq my-log-energy-active t)
    (unwind-protect
        ;; Protected block
        (let* ((energy-levels '("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
               ;; Prompt the user for an energy level
               (energy (consult--read energy-levels
                                      :prompt "What is your energy level? "
                                      :require-match t))
               ;; Get the current timestamp
               (timestamp (format-time-string "%Y-%m-%d %H:%M:%S")))
          ;; Check if a value was entered
          (when energy
            ;; Write to a CSV file
            (with-temp-buffer
              (insert (format "%s,%s\n" timestamp energy))
              ;; Change the path to your desired CSV file location
              (append-to-file (point-min) (point-max) (concat 'org-lookbacks-directory "emotion_log.csv")))))
      ;; Cleanup code: Reset the flag and reschedule the timer
      (setq my-log-energy-active nil)
      (setq my-log-energy-timer (run-at-time "30 minutes" nil 'my-log-energy)))))

;; Initialize the first prompt
(setq my-log-energy-timer (run-at-time "30 minutes" nil 'my-log-energy))
#+end_src

* Speedy note taking

** Copy quote with title into the quote

#+begin_src emacs-lisp
(defun my-org-append-title-to-quote-at-point-and-copy ()
  "Append the Org file title within the quote block at point and copy it to clipboard."
  (interactive)
  ;; Find the beginning and end of the quote block at the current point
  (let ((begin-quote (save-excursion
                       (and (re-search-backward "^#\\+begin_quote" nil t)
                            (match-beginning 0))))
        (end-quote (save-excursion
                     (and (re-search-forward "^#\\+end_quote" nil t)
                          (match-end 0)))))
    ;; Ensure the point is within a quote block
    (when (and begin-quote end-quote (> end-quote (point)))
      ;; Find and store the title of the Org file
      (let* (title
             (quote-block (buffer-substring-no-properties begin-quote end-quote)))
        (save-excursion
          (goto-char (point-min))
          (setq title (if (re-search-forward "^#\\+title: \\(.*\\)$" nil t)
                          (match-string 1)
                        "Untitled")))
        ;; Insert the title inside the quote block
        (setq quote-block (replace-regexp-in-string "^#\\+end_quote" (concat "-- " title "\n#+end_quote") quote-block))
        ;; Copy to clipboard
        (kill-new quote-block)
        (message "Quote with title copied to clipboard")))))
#+end_src
* New Additions

#+begin_src elisp
(use-package! org-modern
  :after org
  :config
  (global-org-modern-mode)
)
#+end_src
* Bookmarks

#+begin_src elisp
;;; Taken from https://xenodium.com/building-your-own-bookmark-launcher/
;;;###autoload
(defun browser-bookmarks (org-file)
  "Return all links from ORG-FILE."
  (with-temp-buffer
    (let (links)
      (insert-file-contents org-file)
      (org-mode)
      (org-element-map (org-element-parse-buffer) 'link
        (lambda (link)
          (let* ((raw-link (org-element-property :raw-link link))
                 (content (org-element-contents link))
                 (title (substring-no-properties (or (seq-first content) raw-link))))
            (push (concat title
                          "\n\n"
                          (propertize raw-link 'face 'whitespace-space)
                          "\n\n")
                  links)))
        nil nil 'link)
      (seq-sort 'string-greaterp links))))

;;;###autoload
(defun open-bookmark ()
  (interactive)
  (browse-url (seq-elt (split-string (completing-read "Open: " (browser-bookmarks "~/Nextcloud/org/notes/bookmarks.org")) "\n") 1)))
#+end_src

* Deprecated
:PROPERTIES:
:header-args: :tangle no
:END:
** Company org roam
#+BEGIN_SRC elisp
(use-package! company-org-roam
  :when (featurep! :completion company)
  :after org-roam
  :config
  (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+END_SRC
** Org Autolist use at the end
#+begin_src elisp
(after! org
  (add-hook 'org-mode-hook (lambda () (org-autolist-mode))))
#+end_src
** Test for dired subtree instead of treemacs
#+BEGIN_SRC elisp
(use-package! dired-sidebar
  :unless (featurep! :emacs dired +ranger)
  :defer
  :config
  (setq dired-sidebar-width 25
        dired-sidebar-theme 'nerd
        dired-sidebar-tui-update-delay 5
        dired-sidebar-recenter-cursor-on-tui-update t
        dired-sidebar-no-delete-other-windows t
        dired-sidebar-use-custom-modeline t)
  (pushnew! dired-sidebar-toggle-hidden-commands
            'evil-window-rotate-upwards 'evil-window-rotate-downwards)
  (map! :map dired-sidebar-mode-map
        :n "q" #'dired-sidebar-toggle-sidebar))

(use-package! dired-subtree
  :unless (featurep! :emacs dired +ranger)
  :config
  (setq dired-subtree-cycle-depth 4
        dired-subtree-line-prefix ">")
  (map! :map dired-mode-map
        [backtab] #'dired-subtree-cycle
        [tab] #'dired-subtree-toggle
        :n "g^" #'dired-subtree-beginning
        :n "g$" #'dired-subtree-end
        :n "gm" #'dired-subtree-mark-subtree
        :n "gu" #'dired-subtree-unmark-subtree))
#+END_SRC
** Gkroam
#+BEGIN_SRC elisp
(use-package gkroam
  :ensure t
  :init
  (setq gkroam-root-dir "~/org/notes/"
        gkroam-pub-dir "~/org/site/")
  :bind
  (("C-c r G" . gkroam-update-all)
   ("C-c r g" . gkroam-update)
   ("C-c r d" . gkroam-daily)
   ("C-c r f" . gkroam-find)
   ("C-c r e" . gkroam-edit)
   ("C-c r n" . gkroam-smart-new)
   ("C-c r i" . gkroam-insert)
   ("C-c r I" . gkroam-index)
   ("C-c r p" . gkroam-preview)
   ("C-c r v" . gkroam-preview-current)
   ("C-c r t" . gkroam-toggle-brackets)))
#+END_SRC
** Aw keys
#+begin_src elisp
;; (setq aw-keys '(106 107 108 105 111 104 121 117 112) t)
#+end_src
** Own dictionary
DEPRECATED Part of code
#+begin_src elisp
(after! org
  (setq company-ispell-dictionary (file-truename "~/OneDrive/OrgMode/misc/english-words.txt"))
)
#+end_src
** Emacs 28
#+begin_src elisp
(when EMACS28+
  (add-hook 'latex-mode-hook #'TeX-latex-mode))
#+end_src
** Dark Mode Switcher
#+BEGIN_SRC elisp
;;;###autoload
(defun switch-dark-mode()
  "Switch to dark mode with a key"
  (interactive)
  (if (equal doom-theme 'doom-solarized-light)
      (progn
        (message "Dark theme enabled")
        (load-theme 'doom-tomorrow-night 'noconfirm)
        (doom/reload-theme))
    (progn
      (message "Light theme enabled")
      (load-theme 'doom-solarized-light 'noconfirm)
      (doom/reload-theme))))
#+END_SRC
** Lsp restart after changing env
#+BEGIN_SRC elisp
(defun change-env-and-restart-lsp()
  "Changes the python environment and
restart lsp based on that environment"
  (interactive)
  (conda-env-activate)
  (lsp-restart-workspace))
#+END_SRC
** Fix Modeline Overflow
#+BEGIN_SRC elisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs  "    "))) ; <-- added padding here
#+END_SRC

** References Management
#+BEGIN_SRC elisp
(use-package org-ref
  :after org)
;; Comehere
(after! org
  (setq bibtex-completion-library-path "~/OneDrive/OrgMode/pdfs/"
      bibtex-completion-bibliography "~/OneDrive/OrgMode/org/references/articles.bib"
      bibtex-completion-notes-path "~/OneDrive/OrgMode/org/references/articles.org"
      bibtex-completion-notes-extension "org"
      bibtex-completion-notes-path "~/OneDrive/OrgMode/org/references/articles.org")

  (setq org-ref-notes-directory "~/OneDrive/OrgMode/org/notes/"
      org-ref-bibliography-notes "~/OneDrive/OrgMode/org/references/articles.org"
      org-ref-default-bibliography '("~/OneDrive/OrgMode/org/references/articles.bib")
      org-ref-pdf-directory "~/OneDrive/OrgMode/pdfs")
)
#+END_SRC

** Org Roam Server
#+BEGIN_SRC elisp
(use-package org-roam-server
  :defer t
  :config
  (setq org-roam-server-host "0.0.0.0"
        org-roam-server-port 1701
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-poll nil
        org-roam-server-network-arrows 'from
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+END_SRC

** Org Roam Graph v1
#+BEGIN_SRC elisp
(after! org-roam

  (defadvice! doom-modeline--reformat-roam (orig-fun)
    :around #'doom-modeline-buffer-file-name
    (message "Reformat?")
    (message (buffer-file-name))
    (if (s-contains-p org-roam-directory (or buffer-file-name ""))
        (replace-regexp-in-string
         "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
         "🢔(\\1-\\2-\\3) "
         (funcall orig-fun))
      (funcall orig-fun)))

  (setq org-roam-graph-node-extra-config '(("shape"      . "underline")
                                           ("style"      . "rounded,filled")
                                           ("fillcolor"  . "#EEEEEE")
                                           ("color"      . "#C9C9C9")
                                           ("fontcolor"  . "#111111")
                                           ("fontname"   . "Overpass")))

  (setq +org-roam-graph--html-template
        (replace-regexp-in-string "%\\([^s]\\)" "%%\\1"
                                  (f-read-text (concat doom-private-dir "misc/org-roam-template.html"))))

  (defadvice! +org-roam-graph--build-html (&optional node-query callback)
    "Generate a graph showing the relations between nodes in NODE-QUERY. HTML style."
    :override #'org-roam-graph--build
    (unless (stringp org-roam-graph-executable)
      (user-error "`org-roam-graph-executable' is not a string"))
    (unless (executable-find org-roam-graph-executable)
      (user-error (concat "Cannot find executable %s to generate the graph.  "
                          "Please adjust `org-roam-graph-executable'")
                  org-roam-graph-executable))
    (let* ((node-query (or node-query
                           `[:select [file titles] :from titles
                             ,@(org-roam-graph--expand-matcher 'file t)]))
           (graph      (org-roam-graph--dot node-query))
           (temp-dot   (make-temp-file "graph." nil ".dot" graph))
           (temp-graph (make-temp-file "graph." nil ".svg"))
           (temp-html  (make-temp-file "graph." nil ".html")))
      (org-roam-message "building graph")
      (make-process
       :name "*org-roam-graph--build-process*"
       :buffer "*org-roam-graph--build-process*"
       :command `(,org-roam-graph-executable ,temp-dot "-Tsvg" "-o" ,temp-graph)
       :sentinel (progn
                   (lambda (process _event)
                     (when (= 0 (process-exit-status process))
                       (write-region (format +org-roam-graph--html-template (f-read-text temp-graph)) nil temp-html)
                       (when callback
                         (funcall callback temp-html)))))))))
#+end_src

** Hugo and Roam v1 Backlinks and Setup File
#+BEGIN_SRC elisp

(after! (org org-roam)
    (defun my/org-roam--backlinks-list (file)
      (if (org-roam--org-roam-file-p file)
          (--reduce-from
           (concat acc (format "- [[file:%s][%s]]\n"
                               (file-relative-name (car it) org-roam-directory)
                               (org-roam--get-title-or-slug (car it))))
           "" (org-roam-sql [:select [from]
                             :from links
                             :where (= to $s1)
                             :and from :not :like $s2] file "%private%"))
        ""))
    (defun my/org-export-preprocessor (_backend)
      (let ((links (my/org-roam--backlinks-list (buffer-file-name))))
        (unless (string= links "")
          (save-excursion
            (goto-char (point-max))
            (insert (concat "\n* Backlinks\n" links))))))
    (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor))

(after! (org ox-hugo)
  (defun jethro/conditional-hugo-enable ()
    (save-excursion
      (if (cdr (assoc "SETUPFILE" (org-roam--extract-global-props '("SETUPFILE"))))
          (org-hugo-auto-export-mode +1)
        (org-hugo-auto-export-mode -1))))
  (add-hook 'org-mode-hook #'jethro/conditional-hugo-enable))
#+END_SRC

** Graphviz Mode
#+begin_src elisp
(use-package! graphviz-dot-mode
  :commands graphviz-dot-mode
  :mode ("\\.dot\\'" "\\.gz\\'")
  :init
  (after! org
    (setcdr (assoc "dot" org-src-lang-modes)
            'graphviz-dot)))

(use-package! company-graphviz-dot
  :after graphviz-dot-mode)
#+end_src
** CiteProc
#+begin_src elisp
(use-package citeproc-org
  :after ox-hugo
  :config
  (citeproc-org-setup))
#+end_src
** EAF
#+begin_src elisp
(use-package eaf
  :load-path "~/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
  :defer 10
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding))
#+end_src

** Capture Org mode
#+begin_src elisp
(after! org
  (require 'org-capture)
  (require 'org-protocol)

;;; Org Capture
;;;; Thank you random guy from StackOverflow
;;;; http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection

  (defadvice org-capture
      (after make-full-window-frame activate)
    "Advise capture to be the only window when used as a popup"
    (if (equal "emacs-capture" (frame-parameter nil 'name))
        (delete-other-windows)))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "emacs-capture" (frame-parameter nil 'name))
        (delete-frame)))
  )
#+end_src

** Webkit for browsing
#+begin_src elisp
;; (require 'webkit-ace)
;; (require 'webkit-dark)
#+end_src

** Magit Transient
#+begin_src elisp
;; Add keybinding for directly switching to last branch magit
;; Imported from reddit weekly thread
;; (defun lw-magit-checkout-last (&optional start-point)
;;   (interactive)
;;   (magit-branch-checkout "-" start-point))
;; (transient-append-suffix 'magit-branch
;;   "w" '("-" "last branch" lw-magit-checkout-last))
#+end_src

** Anaconda
#+BEGIN_SRC elisp
(use-package conda
  :after python
  :init
  (setq-default
   conda-env-home-directory "/opt/anaconda3/"
   conda-anaconda-home "/opt/anaconda3/")
  :config
  (setq flycheck-checker-error-threshold nil)
  ;; if you want interactive shell support, include:
  (conda-env-initialize-interactive-shells)
  ;; if you want eshell support, include:
  (conda-env-initialize-eshell)
)
#+END_SRC

** Ivy
*** Ivy choosing buffer
I use ivy when splitting buffer to choose buffer to go to.
#+begin_src elisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/projectile-find-file))
(setq +ivy-buffer-preview t)
#+end_src
*** Ivy search into hidden files too
#+BEGIN_SRC elisp
;;;###autoload
(defun +ivy/project-search-with-hidden-files ()
  (interactive)
  (let ((counsel-rg-base-command "rg -zS --no-heading --line-number --color never --hidden %s . "))
    (+ivy/project-search)))
#+END_SRC

** Prodigy
#+BEGIN_SRC elisp
(after! prodigy
  (prodigy-define-tag
    :name 'webpack
    :ready-message "Compiled successfully!")

  (prodigy-define-tag
    :name 'hugook
    :ready-message "Hugo service started")

  (prodigy-define-tag
    :name 'serve
    :ready-message "Serving!")
  (prodigy-define-service
    :name "Python app"
    :command "python"
    :args '("-m" "SimpleHTTPServer" "6001")
    :cwd "~/"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (prodigy-define-service
    :name "Hugo server"
    :port 5000
    :command "hugo"
    :args '("server" "-t")
    :cwd "~/OneDrive/OrgMode/org/blogging/"
    :stop-signal 'sigkill
    :tags '(hugook)
    :kill-process-buffer-on-stop t))

#+END_SRC
** Evil
#+begin_src elisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src
** Treemacs
*** Treemacs Theme
#+begin_src elisp
(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
#+end_src
*** Treemacs Gitignore
#+BEGIN_SRC elisp
(with-eval-after-load 'treemacs
  (defun treemacs-ignore-gitignore (file _)
    (string= file ".gitignore"))
  (push #'treemacs-ignore-gitignore treemacs-ignored-file-predicates))
#+END_SRC
** Nov. el mode
#+BEGIN_SRC elisp
(use-package nov
  :defer t
  :config
  (setq nov-text-width t
        visual-fill-column-center-text t)
  (add-hook 'nov-mode-hook 'visual-line-mode)
  (add-hook 'nov-mode-hook 'visual-fill-column-mode)
)
#+END_SRC
** Leetcode
#+BEGIN_SRC elisp
(use-package leetcode
  :defer t
  :config
  (setq leetcode-prefer-language "python3"
        leetcode-prefer-sql "mysql"))

#+END_SRC

** Search
#+BEGIN_SRC elisp
(after! org (setq org-link-abbrev-alist
                  '(("doom-repo" . "https://github.com/hlissner/doom-emacs/%s")
                    ("wolfram" . "https://wolframalpha.com/input/?i=%s")
                    ("duckduckgo" . "https://duckduckgo.com/?q=%s")
                    ("gmap" . "https://maps.google.com/maps?q=%s")
                    ("gimages" . "https://google.com/images?q=%s")
                    ("google" . "https://google.com/search?q=")
                    ("youtube" . "https://youtube.com/watch?v=%s")
                    ("youtu" . "https://youtube.com/results?search_query=%s")
                    ("github" . "https://github.com/%s")
                    ("attachments" . "~/OneDrive/OrgMode/org/.attachments/"))))
#+END_SRC
** Plantuml Mode
#+BEGIN_SRC elisp

(use-package plantuml-mode
  :defer t
  :mode ("\\.plantuml\\'" . plantuml-mode)
  :config
  (setq plantuml-executable-path "/usr/bin/plantuml")
  (setq plantuml-default-exec-mode 'executable)
)

#+END_SRC
** Multiple Cursors
#+BEGIN_SRC elisp
(use-package multiple-cursors
  :functions hydra-multiple-cursors
  :bind
  ("M-u" . hydra-multiple-cursors/body)
  :preface
  ;; insert specific serial number
  (defvar ladicle/mc/insert-numbers-hist nil)
  (defvar ladicle/mc/insert-numbers-inc 1)
  (defvar ladicle/mc/insert-numbers-pad "%01d")

  (defun ladicle/mc/insert-numbers (start inc pad)
    "Insert increasing numbers for each cursor specifically."
    (interactive
     (list (read-number "Start from: " 0)
           (read-number "Increment by: " 1)
           (read-string "Padding (%01d): " nil ladicle/mc/insert-numbers-hist "%01d")))
    (setq mc--insert-numbers-number start)
    (setq ladicle/mc/insert-numbers-inc inc)
    (setq ladicle/mc/insert-numbers-pad pad)
    (mc/for-each-cursor-ordered
     (mc/execute-command-for-fake-cursor
      'ladicle/mc--insert-number-and-increase
      cursor)))

  (defun ladicle/mc--insert-number-and-increase ()
    (interactive)
    (insert (format ladicle/mc/insert-numbers-pad mc--insert-numbers-number))
    (setq mc--insert-numbers-number (+ mc--insert-numbers-number ladicle/mc/insert-numbers-inc)))

  :config
  (with-eval-after-load 'hydra
    (defhydra hydra-multiple-cursors (:color pink :hint nil)
"
                                                                        ╔════════╗
    Point^^^^^^             Misc^^            Insert                            ║ Cursor ║
  ──────────────────────────────────────────────────────────────────────╨────────╜
     _k_    _K_    _M-k_    [_l_] edit lines  [_i_] 0...
     ^↑^    ^↑^     ^↑^     [_m_] mark all    [_a_] letters
    mark^^ skip^^^ un-mk^   [_s_] sort        [_n_] numbers
     ^↓^    ^↓^     ^↓^
     _j_    _J_    _M-j_
  ╭──────────────────────────────────────────────────────────────────────────────╯
                           [_q_]: quit, [Click]: point
"
          ("l" mc/edit-lines :exit t)
          ("m" mc/mark-all-like-this :exit t)
          ("j" mc/mark-next-like-this)
          ("J" mc/skip-to-next-like-this)
          ("M-j" mc/unmark-next-like-this)
          ("k" mc/mark-previous-like-this)
          ("K" mc/skip-to-previous-like-this)
          ("M-k" mc/unmark-previous-like-this)
          ("s" mc/mark-all-in-region-regexp :exit t)
          ("i" mc/insert-numbers :exit t)
          ("a" mc/insert-letters :exit t)
          ("n" ladicle/mc/insert-numbers :exit t)
          ("<mouse-1>" mc/add-cursor-on-click)
          ;; Help with click recognition in this hydra
          ("<down-mouse-1>" ignore)
          ("<drag-mouse-1>" ignore)
          ("q" nil))))
#+END_SRC

** Eww
#+BEGIN_SRC elisp
(use-package eww
  :defer t
  :commands (eww
             eww-browse-url
             eww-search-words
             eww-open-in-new-buffer
             eww-open-file
             prot/eww-visit-history)
  :config
  (setq eww-restore-desktop nil)
  (setq eww-desktop-remove-duplicates t)
  (setq eww-header-line-format "%u")
  (setq eww-search-prefix "https://duckduckgo.com/html/?q=")
  (setq eww-download-directory "~/Downloads/")
  (setq eww-suggest-uris
        '(eww-links-at-point
          eww-prompt-history
          thing-at-point-url-at-point))
  (setq eww-bookmarks-directory "~/.emacs.d/eww-bookmarks/")
  (setq eww-history-limit 150)
  (setq eww-use-external-browser-for-content-type
        "\\`\\(video/\\|audio/\\|application/pdf\\)")
  (setq eww-browse-url-new-window-is-tab nil)
  (setq eww-form-checkbox-selected-symbol "[X]")
  (setq eww-form-checkbox-symbol "[ ]")

  (defun prot/eww-visit-history (&optional arg)
    "Revisit a URL from `eww-prompt-history' using completion.
With \\[universal-argument] produce a new buffer."
    (interactive "P")
    (let ((history eww-prompt-history)  ; eww-bookmarks
          (new (if arg t nil)))
      (icomplete-vertical-do ()
        (eww
         (completing-read "Visit website from history: " history nil t)
         new))))
  :bind (:map eww-mode-map
              ("j" . next-line)
              ("k" . previous-line)
              ("f" . forward-char)
              ("b" . backward-char)
              ("a" . prot/eww-org-archive-current-url)
              ("B" . eww-back-url)
              ("N" . eww-next-url)
              ("P" . eww-previous-url)))


(use-package browse-url
  :after eww
  :config
  (setq browse-url-browser-function 'eww-browse-url))
#+END_SRC

** EIN [ Emacs Ipython Notebook ]
#+BEGIN_SRC elisp
(after! ein-notebook
  (defun +ein-buffer-p (buf)
    (or (memq buf (ein:notebook-opened-buffers))
        (memq buf (mapcar #'ein:notebooklist-get-buffer (ein:notebooklist-keys)))))
  (add-to-list 'doom-real-buffer-functions #'+ein-buffer-p nil #'eq)

  (defun spacemacs/ein:worksheet-merge-cell-next ()
    (interactive)
    (ein:worksheet-merge-cell (ein:worksheet--get-ws-or-error) (ein:worksheet-get-current-cell) t t))

  ;; (set-popup-rule! "^\\*ein" :ignore t)
  ;; keybindings mirror ipython web interface behavior
  (evil-define-key 'normal  ein:markdown-mode-map
    ;; keybindings mirror ipython web interface behavior
    "go" 'ein:worksheet-goto-next-input-km
    "gO" 'ein:worksheet-goto-prev-input-km)

  (evil-define-key 'insert ein:notebook-mode-map
    ;; keybindings mirror ipython web interface behavior
    "<C-return>" 'ein:worksheet-execute-cell-km
    "<C-H-return>" 'ein:worksheet-execute-cell-and-goto-next-km)

  ;; ein show images in there
  (setq ein:output-area-inlined-images t)

  (map! :map ein:notebook-mode-map
        ;; Insert new cell, Execute cells
        ;; Merge, Split, Remove or Move cells
        "<C-H-return>" 'ein:worksheet-execute-cell-km
        "<H-return>" 'ein:worksheet-execute-cell-and-goto-next-km
        "H-o" 'ein:worksheet-insert-cell-below-km
        "H-O" 'ein:worksheet-insert-cell-above-km
        "H-c" 'ein:worksheet-change-cell-type-km
        "H-b" 'ein:worksheet-split-cell-at-point-km
        "H-k" 'ein:worksheet-move-cell-up-km
        "H-j" 'ein:worksheet-move-cell-down-km
        "C-H-k" 'ein:worksheet-merge-cell-km
        "C-H-j" 'spacemacs/ein:worksheet-merge-cell-next
        "H-y" 'ein:worksheet-copy-cell-km
        "H-t" 'ein:worksheet-toggle-output-km
        "H-p" 'ein:worksheet-yank-cell-km
        "H-d" 'ein:worksheet-kill-cell-km
        "H-;" 'ein:notebook-scratchsheet-open-km
        ;; Output
        "C-H-o" 'ein:worksheet-toggle-output-km
        "C-l" 'ein:worksheet-clear-output-km
        "C-H-l" 'ein:worksheet-clear-all-output-km
        ;; Notebook Opening and closing
        "C-H-s" 'ein:notebook-save-notebook-command-km
        "C-H-r" 'ein:notebook-rename-command-km
        "C-H-x" 'ein:notebook-close-km
        :map ein:notebooklist-mode-map
        :nv "O" 'ein:notebook-open-km
        :nv "o" 'ace-link-custom)

  (map!  :localleader
         :map ein:notebook-mode-map
         :desc "Show Hydra" :n "?" #'+ein/hydra/body
         :desc "Change cell type" :n "c" #'ein:worksheet-change-cell-type-km
         :desc "Execute and step" :n "RET" #'ein:worksheet-execute-cell-and-goto-next
         :desc "Yank cell" :n "y" #'ein:worksheet-copy-cell
         :desc "Paste cell" :n "p" #'ein:worksheet-yank-cell
         :desc "Delete cell" :n "d" #'ein:worksheet-kill-cell
         :desc "Insert cell below" :n "o" #'ein:worksheet-insert-cell-below
         :desc "Insert cell above" :n "O" #'ein:worksheet-insert-cell-above
         :desc "Next cell" :n "j" #'ein:worksheet-goto-next-input
         :desc "Previous cell" :n "k" #'ein:worksheet-goto-prev-input
         :desc "Save notebook" :n "fs" #'ein:notebook-save-notebook-command)

  (add-hook 'ein:notebook-mode-hook #'virtual-auto-fill-mode)
  (add-hook 'ein:markdown-mode-hook #'virtual-auto-fill-mode)
  ;; (add-hook 'ein:ipdb-mode-hook #'virtual-auto-fill-mode)
  ;; (add-hook 'ein:shared-output-mode-hook #'virtual-auto-fill-mode)
  )
(defun my-preview-latex ()
  "Preview LaTeX from the current cell in a separate buffer.

Handles only markdown and code cells, but both in a bit different
ways: on the former, its input is being rendered, while on the
latter - its output."
  (interactive)
  (let* ((cell (ein:worksheet-get-current-cell))
	 (text-to-render
	  (cond ((ein:markdowncell-p cell) (slot-value cell :input))
		((ein:codecell-p cell)
		 (plist-get (car (cl-remove-if-not
				  (lambda (e) (string= (plist-get e :name) "stdout"))
				  (slot-value cell :outputs)))
			    :text))
		(t (error "Unsupported cell type"))))
	 (buffer (get-buffer-create " *ein: LaTeX preview*")))
    (with-current-buffer buffer
      (when buffer-read-only
	(toggle-read-only))
      (unless (= (point-min) (point-max))
	(delete-region (point-min) (point-max)))
      (insert text-to-render)
      (goto-char (point-min))
      (org-mode)
      (org-toggle-latex-fragment 16)
      (special-mode)
      (unless buffer-read-only
	(toggle-read-only))
      (display-buffer
       buffer
       '((display-buffer-below-selected display-buffer-at-bottom)
         (inhibit-same-window . t)))
      (fit-window-to-buffer (window-in-direction 'below)))))
#+END_SRC
** Flutter
*** Dart Setup
#+BEGIN_SRC elisp
(use-package dart-mode
  :defer t
  :init
  (setq lsp-dart-sdk-dir "/opt/flutter/bin/cache/dart-sdk/")
  (setq lsp-dart-analysis-sdk-dir "/opt/flutter/bin/cache/dart-sdk/")
  :hook ((dart-mode . smartparens-mode)
         (dart-mode . lsp))
  :custom
  (dart-format-on-save t)
  (dart-sdk-path "/opt/flutter/bin/cache/dart-sdk/"))
#+END_SRC
*** Flutter
#+BEGIN_SRC elisp
(use-package flutter
  :after dart-mode
  :custom
  (flutter-sdk-path "/opt/flutter/"))
#+END_SRC

** Julia
#+BEGIN_SRC elisp
(setq lsp-julia-default-environment "~/.julia/environments/v1.5")
#+END_SRC
** Bibtex

#+begin_src elisp
(after! org
  (setq bibtex-completion-library-path "~/OneDrive/OrgMode/pdfs/"
        bibtex-completion-bibliography "~/OneDrive/OrgMode/org/references/articles.bib"
        bibtex-completion-notes-path "~/OneDrive/OrgMode/org/references/articles.org"
        bibtex-completion-notes-extension "org"
        bibtex-completion-notes-path "~/OneDrive/OrgMode/org/references/articles.org"
        bibtex-completion-notes-template-multiple-files  (concat
                                                          "#+TITLE: ${title}\n"
                                                          "#+ROAM_KEY: cite:${citekey}\n"
                                                          "* TODO Notes\n"
                                                          ":PROPERTIES:\n"
                                                          ":Custom_ID: ${citekey}\n"
                                                          ":NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")\n"
                                                          ":AUTHOR: ${author-abbrev}\n"
                                                          ":JOURNAL: ${journaltitle}\n"
                                                          ":DATE: ${date}\n"
                                                          ":YEAR: ${year}\n"
                                                          ":DOI: ${doi}\n"
                                                          ":URL: ${url}\n"
                                                          ":END:\n\n"
                                                          ))

  ;; (setq org-ref-notes-directory "~/OneDrive/OrgMode/org/notes/"
  ;;       org-ref-completion-library 'org-ref-ivy-cite
  ;;       org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
  ;;       org-ref-bibliography-notes "~/OneDrive/OrgMode/org/references/articles.org"
  ;;       org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
  ;;       org-ref-default-bibliography '("~/OneDrive/OrgMode/org/references/articles.bib")
  ;;       org-ref-notes-function 'orb-edit-notes
  ;;       org-ref-pdf-directory "~/OneDrive/OrgMode/pdfs")
  )

(use-package org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  ;; (setq orb-preformat-keywords '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  )
#+end_src

** Pdf Tools
#+BEGIN_SRC elisp
;; (defun bjm/save-buffer-no-args ()
;; "Save buffer ignoring arguments"
;; (save-buffer))
;; (use-package pdf-tools
  ;; :defer t
  ;; :bind (:map pdf-view-mode-map
              ;; ("C-s" . 'isearch-forward)
              ;; ("C-c h" . hydra-pdftools/body)
              ;; ("M-w" . 'pdf-view-kill-ring-save)
              ;; ("s-g" . 'pdf-view-goto-page)
              ;; ("s-h" . 'pdf-annot-add-highlight-markup-annotation)
              ;; ("s-n" . 'org-noter-insert-note-no-questions)
              ;; ("s-d" . 'pdf-annot-delete)
              ;; )
  ;; :config
;;
  ;; ;; initialise
  ;; ;;(pdf-tools-install)
  ;; ;; open pdfs scaled to fit page
  ;; (setq-default pdf-view-display-size 'fit-width)
  ;; ;; automatically annotate highlights
  ;; (setq pdf-annot-activate-created-annotations t)
  ;; ;; zoom set to 10% instead of 25
  ;; (setq pdf-view-resize-factor 1.1)
  ;; (with-eval-after-load "pdf-annot"
    ;; ;; save after adding comment
    ;; (advice-add 'pdf-annot-edit-contents-commit :after 'bjm/save-buffer-no-args)
    ;; )
;;
  ;; (defhydra hydra-pdftools (:color blue :hint nil)
    ;; "
                                                                      ;; ╭───────────┐
       ;; Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
   ;; ╭──────────────────────────────────────────────────────────────────┴───────────╯
         ;; ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
         ;; ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
         ;; ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
         ;; ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
    ;; _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
         ;; ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
         ;; ^^_n_^^      ^ ^  _r_eset slice box
         ;; ^^^↓^^^
         ;; ^^_G_^^
   ;; --------------------------------------------------------------------------------
        ;; "
    ;; ("\\" hydra-master/body "back")
    ;; ("<ESC>" nil "quit")
    ;; ("al" pdf-annot-list-annotations)
    ;; ("ad" pdf-annot-delete)
    ;; ("aa" pdf-annot-attachment-dired)
    ;; ("am" pdf-annot-add-markup-annotation)
    ;; ("at" pdf-annot-add-text-annotation)
    ;; ("y"  pdf-view-kill-ring-save)
    ;; ("+" pdf-view-enlarge :color red)
    ;; ("-" pdf-view-shrink :color red)
    ;; ("0" pdf-view-scale-reset)
    ;; ("H" pdf-view-fit-height-to-window)
    ;; ("W" pdf-view-fit-width-to-window)
    ;; ("P" pdf-view-fit-page-to-window)
    ;; ("n" pdf-view-next-page-command :color red)
    ;; ("p" pdf-view-previous-page-command :color red)
    ;; ("d" pdf-view-dark-minor-mode)
    ;; ("b" pdf-view-set-slice-from-bounding-box)
    ;; ("r" pdf-view-reset-slice)
    ;; ("g" pdf-view-first-page)
    ;; ("G" pdf-view-last-page)
    ;; ("e" pdf-view-goto-page)
    ;; ("o" pdf-outline)
    ;; ("s" pdf-occur)
    ;; ("i" pdf-misc-display-metadata)
    ;; ("u" pdf-view-revert-buffer)
    ;; ("F" pdf-links-action-perfom)
    ;; ("f" pdf-links-isearch-link)
    ;; ("B" pdf-history-backward :color red)
    ;; ("N" pdf-history-forward :color red)
    ;; ("l" image-forward-hscroll :color red)
    ;; ("h" image-backward-hscroll :color red))
;; )
   #+END_SRC
** Counsel for org-src blocks
#+BEGIN_SRC elisp
(after! org
  (defun +org-private/get-name-src-block ()
    (interactive)
    (let ((completion-ignore-case t)
          (case-fold-search t)
          (all-block-names (org-babel-src-block-names)))
      (ivy-read "Named Source Blocks: " all-block-names
                :require-match t
                :history 'get-name-src-block-history
                :preselect (let (select (thing-at-point 'symbol))
                             (if select (substring-no-properties select)))
                :caller '+org-private/get-name-src-block
                :action #'+org-private/get-name-src-block-action-insert)))

  (defun +org-private/*org-ctrl-c-ctrl-c-counsel-org-tag ()
    "Hook for `org-ctrl-c-ctrl-c-hook' to use `counsel-org-tag'."
    (if (save-excursion
          (beginning-of-line)
          (looking-at "[ \t]*$"))
        (or (run-hook-with-args-until-success
             'org-ctrl-c-ctrl-c-final-hook)
            (user-error
             "C-c C-c can do nothing useful at this location"))
      (let* ((context (org-element-context))
             (type (org-element-type context)))
        (case type
          ;; When at a link, act according to the parent instead.
          (link
           (setq context
                 (org-element-property
                  :parent context))
           (setq type
                 (org-element-type context)))
          ;; Unsupported object types: refer to the first supported
          ;; element or object containing it.
          ((bold
            code
            entity
            export-snippet
            inline-babel-call
            inline-src-block
            italic
            latex-fragment
            line-break
            macro
            strike-through
            subscript
            superscript
            underline
            verbatim)
           (setq context
                 (org-element-lineage
                  context
                  '(radio-target
                    paragraph
                    verse-block
                    table-cell)))))
        ;; For convenience: at the first line of a paragraph on the
        ;; same line as an item, apply function on that item instead.
        (when (eq type 'paragraph)
          (let ((parent (org-element-property
                         :parent context)))
            (when (and (eq (org-element-type parent)
                           'item)
                       (= (line-beginning-position)
                          (org-element-property
                           :begin parent)))
              (setq context
                    parent
                    type
                    'item))))
        (case type
          ((headline inlinetask)
           (save-excursion
             (goto-char
              (org-element-property
               :begin context))
             (call-interactively
              'counsel-org-tag))
           t)))))

)
#+END_SRC

** Icons
#+BEGIN_SRC elisp
(after! org
  (customize-set-value
   'org-agenda-category-icon-alist
   `(
     ("office" ,(list (all-the-icons-material "work" :height 1.2)) nil nil :ascent center)
     ("mundane" ,(list (all-the-icons-material "weekend" :height 1.2)) nil nil :ascent center)
     ("recurring" ,(list (all-the-icons-material "loop" :height 1.2)) nil nil :ascent center)
     ("events" ,(list (all-the-icons-material "event_note" :height 1.2)) nil nil :ascent center)
     ("inbox" ,(list (all-the-icons-material "check_box" :height 1.2)) nil nil :ascent center)
     ("book" ,(list (all-the-icons-material "book" :height 1.2)) nil nil :ascent center)
     ("reading" ,(list (all-the-icons-material "book" :height 1.2)) nil nil :ascent center)
     ("coding" ,(list (all-the-icons-material "code" :height 1.2)) nil nil :ascent center)
     ("someday" ,(list (all-the-icons-material "schedule" :height 1.2)) nil nil :ascent center)
     ("project" ,(list (all-the-icons-octicon "beaker" :height 1.2)) nil nil :ascent center)
     ("finance" ,(list (all-the-icons-material "attach_money" :height 1.2)) nil nil :ascent center)
     ("ideas" ,(list (all-the-icons-octicon "light-bulb" :height 1.2)) nil nil :ascent center)
     ("paper" ,(list (all-the-icons-octicon "rocket" :height 1.2)) nil nil :ascent center)
     ))
)
#+END_SRC***
** Apply a random theme based on time of the day
#+begin_src elisp
(defun lh/load-random-theme ()
  "Load a random theme, light during the day"
  (interactive)
  (let* ((doom-dark-themes
          '(doom-tomorrow-night doom-nord doom-one doom-city-lights doom-gruvbox
                                doom-henna doom-material doom-oceanic-next
                                doom-spacegrey doom-moonlight doom-challenger-deep
                                doom-opera doom-peacock doom-rouge doom-molokai
                                doom-monokai-classic doom-palenight
                                ;; chopping block
                                doom-snazzy doom-horizon doom-dark+ doom-solarized-dark doom-old-hope doom-dracula
                                doom-sourcerer doom-wilmersdorf
                                ;; ;; no bueno
                                ;; doom-laserwave doom-ephemeral doom-nova doom-fairy-floss doom-manegarm
                                ;; doom-acario-light
                                ))
         (doom-light-themes
          '(doom-gruvbox-light doom-solarized-light
                               doom-tomorrow-day doom-opera-light doom-one-light
                               ;; doom-nord-light doom-acario-light
                               ))
         (current-hour (string-to-number (format-time-string "%H")))
         (current-themes (if (or (>= current-hour 19) (< current-hour 7))
                             doom-dark-themes doom-light-themes)))
    (load-theme (nth (random (length current-themes)) current-themes) t)))

(lh/load-random-theme)
;; load a new random theme at 7:00 and 19:00
;; run-at-time runs immediately if the current time of day is past the specified
;; time, so we need some logic to avoid this wastefully loading themes
;; repeatedly on startup
(let ((current-hour (string-to-number (format-time-string "%H"))))
  (if (< current-hour 7)
      (run-at-time "07:00" 43200 #'lh/load-random-theme)
    (if (< current-hour 19)
        (run-at-time "19:00" 43200 #'lh/load-random-theme)
      ;; when it's past 19:00, run the run-at-time once we're into the next day
      ;; before 07:00 to avoid it running immediately
      (run-at-time "6 hour" nil (lambda () (run-at-time "07:00" 43200 #'lh/load-random-theme))))))
#+end_src

** Workout log

#+begin_src emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("$1" "$2" entry(file+olp+datetree"~/OneDrive/OrgMode/org/notes/20220320153833-workout_log.org" "Workout Log")
               "** <%<%I:%M:%S>> %^{workout description} %^{calories}p %^{reps}p%?
:PROPERTIES:
:CREATED:    %U
:END:")))
#+end_src
** Colemak Keyboard Evil

#+begin_src emacs-lisp
(use-package evil-colemak-basics
  :after evil evil-snipe
  :init
  (setq evil-colemak-basics-char-jump-commands 'evil-snipe)
  :config
  (global-evil-colemak-basics-mode))
#+end_src

** Anki Editor

#+BEGIN_SRC elisp
(use-package anki-editor
  :after org
  :bind (:map org-mode-map
              ("<f12>" . anki-editor-cloze-region-auto-incr)
              ("<f11>" . anki-editor-cloze-region-dont-incr)
              ("<f10>" . anki-editor-reset-cloze-number)
              ("<f9>"  . anki-editor-push-tree))
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
        anki-editor-org-tags-as-anki-tags t)

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))
  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))
  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))
  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
  ;; Initialize
  (anki-editor-reset-cloze-number)
  )

(after! org
  (add-to-list 'org-capture-templates
               '("a" "Anki basic"
                 entry
                 (file+headline org-my-anki-file "Dispatch")
                 "* %<%H:%M>\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%?\n** Back\n")))


(after! org
  (add-to-list 'org-capture-templates
               '("A" "Anki cloze"
                 entry
                 (file+headline org-my-anki-file "Dispatch")
                 "* %<%H:%M>\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n** Extra\n")))
#+END_SRC

** Iedit or Flyspell whichever needed

#+BEGIN_SRC elisp
;;;###autoload
(defun unpackaged/iedit-or-flyspell ()
  "Toggle `iedit-mode' or correct previous misspelling with `flyspell', depending on context.
With point in code or when `iedit-mode' is already active, toggle
`iedit-mode'.  With point in a comment or string, and when
`iedit-mode' is not already active, auto-correct previous
misspelled word with `flyspell'.  Call this command a second time
to choose a different correction."
  (interactive)
  (if (or (bound-and-true-p iedit-mode)
          (and (derived-mode-p 'prog-mode)
               (not (or (nth 4 (syntax-ppss))
                        (nth 3 (syntax-ppss))))))
      ;; prog-mode is active and point is in a comment, string, or
      ;; already in iedit-mode
      (call-interactively #'iedit-mode)
    ;; Not prog-mode or not in comment or string
    (if (not (equal flyspell-previous-command this-command))
        ;; FIXME: This mostly works, but if there are two words on the
        ;; same line that are misspelled, it doesn't work quite right
        ;; when correcting the earlier word after correcting the later
        ;; one

        ;; First correction; autocorrect
        (call-interactively 'flyspell-auto-correct-previous-word)
      ;; First correction was not wanted; use popup to choose
      (progn
        (save-excursion
          (undo))  ; This doesn't move point, which I think may be the problem.
        (flyspell-region (line-beginning-position) (line-end-position))
        (call-interactively 'flyspell-correct-previous-word-generic)))))

#+END_SRC

** Magit Status Buffer in Full Space

#+BEGIN_SRC elisp
;;;###autoload
(defun unpackaged/magit-status ()
  "Open a `magit-status' buffer and close the other window so only Magit is visible.
If a file was visited in the buffer that was active when this
command was called, go to its unstaged changes section."
  (interactive)
  (let* ((buffer-file-path (when buffer-file-name
                             (file-relative-name buffer-file-name
                                                 (locate-dominating-file buffer-file-name ".git"))))
         (section-ident `((file . ,buffer-file-path) (unstaged) (status))))
    (call-interactively #'magit-status)
    (delete-other-windows)
    (when buffer-file-path
      (goto-char (point-min))
      (cl-loop until (when (equal section-ident (magit-section-ident (magit-current-section)))
                       (magit-section-show (magit-current-section))
                       (recenter)
                       t)
               do (condition-case nil
                      (magit-section-forward)
                    (error (cl-return (magit-status-goto-initial-section-1))))))))

#+END_SRC

** Gif Screencast
#+BEGIN_SRC elisp
(use-package gif-screencast
  :defer t
  :bind
  ("<C-print>" . gif-screencast-start-or-stop)
  :config
  (setq gif-screencast-output-directory (expand-file-name "images/gif-screencast" org-directory)))
#+END_SRC
** ESS

Ess config from tecosaur
#+begin_src elisp
(after! ess
  (set-popup-rule! "^\\*R:" :ignore t))

(set-company-backend! 'ess-r-mode '(company-R-args company-R-objects company-dabbrev-code :separate))
(setq ess-eval-visibly 'nowait)
(setq ess-R-font-lock-keywords
      '((ess-R-fl-keyword:keywords . t)
        (ess-R-fl-keyword:constants . t)
        (ess-R-fl-keyword:modifiers . t)
        (ess-R-fl-keyword:fun-defs . t)
        (ess-R-fl-keyword:assign-ops . t)
        (ess-R-fl-keyword:%op% . t)
        (ess-fl-keyword:fun-calls . t)
        (ess-fl-keyword:numbers . t)
        (ess-fl-keyword:operators . t)
        (ess-fl-keyword:delimiters . t)
        (ess-fl-keyword:= . t)
        (ess-R-fl-keyword:F&T . t)))
(after! ess-r-mode
  (appendq! +ligatures-extra-symbols
            '(:assign "⟵"
              :multiply "×"))
  (set-ligatures! 'ess-r-mode
    ;; Functional
    :def "function"
    ;; Types
    :null "NULL"
    :true "TRUE"
    :false "FALSE"
    :int "int"
    :floar "float"
    :bool "bool"
    ;; Flow
    :not "!"
    :and "&&" :or "||"
    :for "for"
    :in "%in%"
    :return "return"
    ;; Other
    :assign "<-"
    :multiply "%*%"))
#+end_src

** Random text overlay using lorem ipsum text

Sometimes, you don't want to show what's on your screen. You can just make a
overlay and enjoy.
#+begin_src elisp
(defvar lorem-ipsum-text)

(defcustom unpackaged/lorem-ipsum-overlay-exclude nil
  "List of regexps to exclude from `unpackaged/lorem-ipsum-overlay'."
  :type '(repeat regexp))

;;;###autoload
(defun unpackaged/lorem-ipsum-overlay ()
  "Overlay all text in current buffer with \"lorem ipsum\" text.
When called again, remove overlays.  Useful for taking
screenshots without revealing buffer contents.

Each piece of non-whitespace text in the buffer is compared with
regexps in `unpackaged/lorem-ipsum-overlay-exclude', and ones
that match are not overlaid.  Note that the regexps are compared
against the entire non-whitespace token, up-to and including the
preceding whitespace, but only the alphabetic part of the token
is overlaid.  For example, in an Org buffer, a line that starts
with:

  #+TITLE: unpackaged.el

could be matched against the exclude regexp (in `rx' syntax):

  (rx (or bol bos blank) \"#+\" (1+ alnum) \":\" (or eol eos blank))

And the line would be overlaid like:

  #+TITLE: parturient.et"
  (interactive)
  (require 'lorem-ipsum)
  (let ((ovs (overlays-in (point-min) (point-max))))
    (if (cl-loop for ov in ovs
                 thereis (overlay-get ov :lorem-ipsum-overlay))
        ;; Remove overlays.
        (dolist (ov ovs)
          (when (overlay-get ov :lorem-ipsum-overlay)
            (delete-overlay ov)))
      ;; Add overlays.
      (let ((lorem-ipsum-words (--> lorem-ipsum-text
                                    (-flatten it) (apply #'concat it)
                                    (split-string it (rx (or space punct)) 'omit-nulls)))
            (case-fold-search nil))
        (cl-labels ((overlay-match (group)
                                   (let* ((beg (match-beginning group))
                                          (end (match-end group))
                                          (replacement-word (lorem-word (match-string group)))
                                          (ov (make-overlay beg end)))
                                     (when replacement-word
                                       (overlay-put ov :lorem-ipsum-overlay t)
                                       (overlay-put ov 'display replacement-word))))
                    (lorem-word (word)
                                (if-let* ((matches (lorem-matches (length word))))
                                    (apply-case word (downcase (seq-random-elt matches)))
                                  ;; Word too long: compose one.
                                  (apply-case word (downcase (compose-word (length word))))))
                    (lorem-matches (length &optional (comparator #'=))
                                   (cl-loop for liw in lorem-ipsum-words
                                            when (funcall comparator (length liw) length)
                                            collect liw))
                    (apply-case (source target)
                                (cl-loop for sc across-ref source
                                         for tc across-ref target
                                         when (not (string-match-p (rx lower) (char-to-string sc)))
                                         do (setf tc (string-to-char (upcase (char-to-string tc)))))
                                target)
                    (compose-word (length)
                                  (cl-loop while (> length 0)
                                           for word = (seq-random-elt (lorem-matches length #'<=))
                                           concat word
                                           do (cl-decf length (length word)))))
          (save-excursion
            (goto-char (point-min))
            (while (re-search-forward (rx (group (1+ (or bol bos blank (not alpha)))
                                                 (0+ (not (any alpha blank)))
                                                 (group (1+ alpha))
                                                 (0+ (not (any alpha blank)))))
                                      nil t)
              (unless (cl-member (match-string 0) unpackaged/lorem-ipsum-overlay-exclude
                                 :test (lambda (string regexp)
                                         (string-match-p regexp string)))
                (overlay-match 2))
              (goto-char (match-end 2)))))))))
#+end_src
** Pdf

#+begin_src emacs-lisp
(use-package! saveplace-pdf-view
  :disabled t)
#+end_src

** Org heading with elfeedurl to org roam with properties

#+begin_src elisp
;;;###autoload
(defun elfeed-inbox-to-org-roam-node ()
  "Create an Org-roam note from the current headline and jump to it."
  (interactive)
  (let ((title "")
        (url "")
        (node nil)
        (elfeedurl "")
        (filetag ""))
    (if (org-in-regexp org-link-bracket-re 1)
        (if (match-end 2)
            (setq title (match-string-no-properties 2)
                  url (buffer-substring-no-properties (match-beginning 0) (match-end 0)))
          (setq title (org-link-unescape (match-string-no-properties 1))
                url "")))
    (setq node (org-roam-node-read title))
    (if (cl-search "youtube.com" url)
        (setq filetag (list "youtube" "video"))
      (setq filetag (list "article")))
    (setq elfeedurl (car (org--property-local-values "ELFEED_URL" nil)) )
    (if (org-roam-node-file node)
        (message"Skipping %s, node already exists" title)
      (org-roam-capture- :node node
                         :keys "d"
                         )

      (org-entry-put (point-min) "REF_URL" url)
      (org-entry-put (point-min) "REF_ELFEED" elfeedurl)
      (org-roam-tag-add filetag)
      (org-capture-finalize nil)
      ;; (kill-whole-line)
      ;; (org-capture-finalize nil)
      )))
#+end_src
** Elfeed url to org heading without org roam

#+begin_src elisp
(defun elfeed-inbox-to-org-heading ()
  "Create an Org-roam note from the current headline and jump to it."
  (interactive)
  (let ((title "")
        (url "")
        (node nil)
        (elfeedurl "")
        (filetag ""))
    (if (org-in-regexp org-link-bracket-re 1)
        (if (match-end 2)
            (setq title (match-string-no-properties 2)
                  url (match-string-no-properties 1))
          (setq title (org-link-unescape (match-string-no-properties 1))
                url "")))
    (+org/remove-link)
    (org-set-property "REF_URL" url)
    (if (cl-search "youtube.com" url)
        (setq filetag (list "youtube" "video"))
      (setq filetag (list "article")))
    (org-copy-subtree)
    (org-paste-subtree)
    (org-todo "")
    (setq noteid (org-id-get-create))
    (setq notelink (format "[[id:%s][%s]]" noteid title))
    (org-roam-refile)
    (org-set-property "REF_NOTE" notelink)
    ;; (org-entry-put (point-min) "REF_URL" url)
    ;; (org-entry-put (point-min) "REF_ELFEED" elfeedurl)
    ;; (org-roam-tag-add filetag)
    ;; (kill-whole-line)
    ;; (org-capture-finalize nil)
    ))
#+end_src

** Elfeed org template

#+begin_src elisp
(after! org (add-to-list 'org-capture-templates
                         '("E" "Elfeed Show Task" entry
                           (file org-inbox-file)
                           "* TODO %?
:PROPERTIES:
:CREATED:    %U
:ELFEED_URL: %a
:END:")))
#+end_src

** Elfeed
#+BEGIN_SRC elisp
(use-package elfeed
  :defer t
  :config
  (require 'elfeed-goodies)
  (elfeed-org)

  (defun prot/elfeed-show-eww (&optional link)
    "Browse current `elfeed' entry link in `eww'.
Only show the readable part once the website loads.  This can
fail on poorly-designed websites."
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry))))
      (eww link)
      (add-hook 'eww-after-render-hook 'eww-readable nil t)))
  (defun prot/elfeed-search-other-window (&optional arg)
    "Browse `elfeed' entry in the other window.
With \\[universal-argument] browse the entry in `eww' using the
`prot/elfeed-show-eww' wrapper."
    (interactive "P")
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (elfeed-entry-link entry))
           (win (selected-window)))
      (with-current-buffer (get-buffer "*elfeed-search*")
        (unless (one-window-p)              ; experimental
          (delete-other-windows win))
        (split-window win (/ (frame-height) 5) 'below)
        (other-window 1)
        (if arg
            (progn
              (when (eq major-mode 'elfeed-search-mode)
                (elfeed-search-untag-all-unread))
              (prot/elfeed-show-eww link))
          (elfeed-search-show-entry entry)))))


  (defun prot/elfeed-kill-buffer-close-window-dwim ()
    "Do-what-I-mean way to handle `elfeed' windows and buffers.

When in an entry buffer, kill the buffer and return to the Elfeed
Search view.  If the entry is in its own window, delete it as
well.

When in the search view, close all other windows.  Else just kill
the buffer."
    (interactive)
    (let ((win (selected-window)))
      (cond ((eq major-mode 'elfeed-show-mode)
             (elfeed-kill-buffer)
             (unless (one-window-p) (delete-window win))
             (switch-to-buffer "*elfeed-search*"))
            ((eq major-mode 'elfeed-search-mode)
             (if (one-window-p)
                 (elfeed-search-quit-window)
               (delete-other-windows win))))))



  (setq rmh-elfeed-org-files (list "~/OneDrive/OrgMode/elfeed/elfeed.org")
        elfeed-db-directory "~/.elfeed/")

  ;; scoring elfeed entries for better visibility
  (defun score-elfeed-entry (entry)
    (let ((title (elfeed-entry-title entry))
          (content (elfeed-deref (elfeed-entry-content entry)))
          (score 0))
      (loop for (pattern n) in '(("space" 1)
                                 ("machine learning\\|neural" 1)
                                 ("startups" 1)
                                 ("breakthrough" 3)
                                 ("state of the art" 3))
            if (string-match pattern title)
            do (incf score n)
            if (string-match pattern content)
            do (incf score n))
      (message "%s - %s" title score)

      ;; store score for later in case I ever integrate machine learning
      (setf (elfeed-meta entry :my/score) score)

      (cond
       ((= score 1)
        (elfeed-tag entry 'relevant))
       ((> score 1)
        (elfeed-tag entry 'important)))
      entry))

  (add-hook 'elfeed-new-entry-hook 'score-elfeed-entry)

  ;; some key bindings
  (define-key elfeed-search-mode-map (kbd "i")
    (lambda () (interactive)
      (elfeed-search-set-filter "@6-months-ago +unread +important")))

  (define-key elfeed-search-mode-map (kbd "v")
    (lambda () (interactive)
      (elfeed-search-set-filter "@6-months-ago +unread +relevant")))

  (define-key elfeed-search-mode-map (kbd "c")
    (lambda () (interactive)
      (elfeed-search-set-filter "@6-months-ago +unread")))

  ;; help me alternate fingers in marking entries as read
  (define-key elfeed-search-mode-map (kbd "f") 'elfeed-search-untag-all-unread)
  (define-key elfeed-search-mode-map (kbd "j") 'elfeed-search-untag-all-unread)

;; faces for relevant and important feeds
  (defface relevant-elfeed-entry
    `((t :background ,(color-lighten-name "orange1" 40)))
    "Marks a relevant Elfeed entry.")

  (defface important-elfeed-entry
    `((t :background ,(color-lighten-name "OrangeRed2" 40)))
    "Marks an important Elfeed entry.")

  (push '(relevant relevant-elfeed-entry)
        elfeed-search-face-alist)

  (push '(important important-elfeed-entry)
        elfeed-search-face-alist)
  :bind (:map elfeed-show-mode-map
         ("s-z" . prot/elfeed-show-eww)
         ("s-x" . prot/elfeed-kill-buffer-close-window-dwim))
)
#+END_SRC

** Elfeed Score

#+begin_src elisp
(use-package! elfeed-score
  :after elfeed
  :config
  (elfeed-score-load-score-file elfeed-score-file) ; See the elfeed-score documentation for the score file syntax
  (elfeed-score-enable)
  (define-key elfeed-search-mode-map "=" elfeed-score-map))
#+end_src

** Elfeed Defaults

#+begin_src elisp
(setq rmh-elfeed-org-files (list "~/Nextcloud/org/elfeed/elfeed.org"))
(setq! elfeed-score-file "~/Nextcloud/org/elfeed/elfeed-score.el")
#+end_src

** Elfeed
*** Elfeed Tube

#+begin_src elisp
(use-package elfeed-tube
  :after elfeed
  :demand t
  :config
  (elfeed-tube-setup)

  :bind (:map elfeed-show-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("F" . elfeed-tube-fetch)
         )
  )

(use-package elfeed-tube-mpv
  :after elfeed
  :bind (:map elfeed-show-mode-map
              ("C-c m" . elfeed-tube-mpv)
              ("C-c f" . elfeed-tube-mpv-follow-mode)
              ("C-c w" . elfeed-tube-mpv-where)))
#+end_src
*** Elfeed Note Taking

#+begin_src elisp
(defun elfeed-link-title (entry)
  "Copy the entry title and URL as org link to the clipboard."
  (interactive)
  (let* ((link (elfeed-entry-link entry))
         (title (elfeed-entry-title entry))
         (titlelink (org-make-link-string link title)))
    (when titlelink
      (kill-new titlelink)
      (x-set-selection 'PRIMARY titlelink)
      (message "Yanked: %s" titlelink))))

(defun elfeed-show-link-title ()
  "Copy the current entry title and URL as org link to the clipboard."
  (interactive)
  (elfeed-link-title elfeed-show-entry))

(defun add-elfeed-show-to-inbox ()
  "Fastest way to capture entry link to org agenda from elfeed show mode"
  (interactive)
  (elfeed-link-title elfeed-show-entry)
  (org-capture nil "E")
  (yank)
  (org-capture-finalize))
#+end_src
* Need More Tests
:PROPERTIES:
:header-args: :tangle no
:END:
** Python Repl

#+BEGIN_SRC elisp
(setq +python-ipython-repl-args '("-i" "--simple-prompt" "--no-color-info"))
(setq +python-jupyter-repl-args '("--simple-prompt"))
#+END_SRC

** Clip2org Kindle Clippings to Org Files
#+begin_src elisp
(use-package! clip2org
  :defer t)
(require 'clip2org)
(setq clip2org-clippings-file "~/scratch/kindle-clippings-manager/Myelse/My Clippings (3).txt")
#+end_src
** Page Break Lines

#+begin_src elisp
(use-package! page-break-lines
  :config
  (global-page-break-lines-mode))
#+end_src
** Orgzly and autosync resolve conflicts

Inspired from sacha chua's config with nextcloud or something.
#+begin_src elisp
(defun my/resolve-orgzly-autosync ()
  (interactive)
  (kai/autosync-resolve-conflicts org-roam-directory))

(defun kai/autosync-resolve-conflicts (directory)
  "Resolve all conflicts under given DIRECTORY."
  (interactive "D")
  (let* ((all (kai/autosync--get-sync-conflicts directory))
         (chosen (kai/autosync--pick-a-conflict all)))
    (kai/autosync-resolve-conflict chosen)))

(defun kai/autosync-show-conflicts-dired (directory)
  "Open dired buffer at DIRECTORY showing all autosync conflicts."
  (interactive "D")
  (find-name-dired directory "*\\(conflict*"))

(defun kai/autosync-resolve-conflict-dired (&optional arg)
  "Resolve conflict of first marked file in dired or close to point with ARG."
  (interactive "P")
  (let ((chosen (car (dired-get-marked-files nil arg))))
    (kai/autosync-resolve-conflict chosen)))

(defun kai/autosync-resolve-conflict (conflict)
  "Resolve CONFLICT file using ediff."
  (let* ((normal (kai/autosync--get-normal-filename conflict)))
    (message normal)
    (kai/ediff-files
     (list conflict normal)
     `(lambda ()
        (when (y-or-n-p "Delete conflict file? ")
          (kill-buffer (get-file-buffer ,conflict))
          (delete-file ,conflict))))))

(defun kai/autosync--get-sync-conflicts (directory)
  "Return a list of all sync conflict files in a DIRECTORY."
  (directory-files-recursively directory "\\(conflict*\\)"))

(defvar kai/autosync--conflict-history nil
  "Completion conflict history")

(defun kai/autosync--pick-a-conflict (conflicts)
  "Let user choose the next conflict from CONFLICTS to investigate."
  (completing-read "Choose the conflict to investigate: " conflicts
                   nil t nil kai/autosync--conflict-history))


(defun kai/autosync--get-normal-filename (conflict)
  "Get non-conflict filename matching the given CONFLICT."
  (replace-regexp-in-string " \(conflict.*\)" "\\1" conflict))


(defun kai/ediff-files (&optional files quit-hook)
  (interactive)
  (lexical-let ((files (or files (dired-get-marked-files)))
                (quit-hook quit-hook)
                (wnd (current-window-configuration)))
    (if (<= (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name
                        "file: "
                        (dired-dwim-target-directory)))))
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2))
          (add-hook 'ediff-after-quit-hook-internal
                    (lambda ()
                      (setq ediff-after-quit-hook-internal nil)
                      (when quit-hook (funcall quit-hook))
                      (set-window-configuration wnd))))
      (error "no more than 2 files should be marked"))))

;; ;; WHen ediff always expand org mode files
;; (with-eval-after-load 'outline
;;   (add-hook 'ediff-prepare-buffer-hook #'org-show-all))

#+end_src

** Music
#+begin_src elisp
;; (require 'mpdel)
#+end_src

** Choose from multiple values
#+BEGIN_SRC elisp
;;;###autoload
(defmacro unpackaged/define-chooser (name &rest choices)
  "Define a chooser command NAME offering CHOICES.
Each of CHOICES should be a list, the first of which is the
choice's name, and the rest of which is its body forms."
  (declare (indent defun))
  ;; Avoid redefining existing, non-chooser functions.
  (cl-assert (or (not (fboundp name))
                 (get name :unpackaged/define-chooser)))
  (let* ((choice-names (mapcar #'car choices))
         (choice-list (--map (cons (car it) `(lambda (&rest args)
                                               ,@(cdr it)))
                             choices))
         (prompt (format "Choose %s: " name))
         (docstring (concat "Choose between: " (s-join ", " choice-names))))
    `(progn
       (defun ,name ()
         ,docstring
         (interactive)
         (let* ((choice-name (completing-read ,prompt ',choice-names)))
           (funcall (alist-get choice-name ',choice-list nil nil #'equal))))
       (put ',name :unpackaged/define-chooser t))))

#+END_SRC
** Citar and Bibtex Completion

#+begin_src elisp
(after! citar
  (map! :map org-mode-map
        :desc "Insert citation" "C-c b" #'citar-insert-citation)
  (setq citar-bibliography jethro/default-bibliography
        citar-at-point-function 'embark-act
        citar-symbol-separator "  "
        citar-format-reference-function 'citar-citeproc-format-reference
        org-cite-csl-styles-dir "~/Zotero/styles"
        citar-citeproc-csl-styles-dir org-cite-csl-styles-dir
        citar-citeproc-csl-locales-dir "~/Zotero/locales"
        )

(after! bibtex-completion
  (after! org-roam
    (setq! bibtex-completion-notes-path org-roam-directory)))

(after! bibtex-completion
  (setq! bibtex-completion-notes-path org-roam-directory
         bibtex-completion-bibliography (concat org-directory "references/articles.bib")
         org-cite-global-bibliography (concat org-directory "references/articles.bib")
         )

  (defun jethro/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor} :: ${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
,#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))

#+end_src
** Doom Configuration for jupyter source blocks
#+BEGIN_SRC elisp

(use-package! ob-jupyter
  :defer t
  :init
  (after! ob-async
    (pushnew! ob-async-no-async-languages-alist
              "jupyter-python"
              "jupyter-julia"
              "jupyter-R"))

  (after! org-src
    (dolist (lang '(python julia R))
      (cl-pushnew (cons (format "jupyter-%s" lang) lang)
                  org-src-lang-modes :key #'car)))

  (add-hook! '+org-babel-load-functions
    (defun +org-babel-load-jupyter-h (lang)
      (when (string-prefix-p "jupyter-" (symbol-name lang))
        (require 'jupyter)
        (let* ((lang-name (symbol-name lang))
               (lang-tail (string-remove-prefix "jupyter-" lang-name)))
          (and (not (assoc lang-tail org-src-lang-modes))
               (require (intern (format "ob-%s" lang-tail))
                        nil t)
               (add-to-list 'org-src-lang-modes (cons lang-name (intern lang-tail)))))
        (with-demoted-errors "Jupyter: %s"
          (require lang nil t)
          (require 'ob-jupyter nil t)))))
  :config
  (defadvice! +org--ob-jupyter-initiate-session-a (&rest _)
    :after #'org-babel-jupyter-initiate-session
    (unless (bound-and-true-p jupyter-org-interaction-mode)
      (jupyter-org-interaction-mode)))

  ;; Remove text/html since it's not human readable
  (delq! :text/html jupyter-org-mime-types)

  (require 'tramp))

#+END_SRC
** Org export yt links

#+begin_src elisp
(after! org
           (org-link-set-parameters "yt" :export #'+org-export-yt)
           (defun +org-export-yt (path desc backend _com)
             (cond ((org-export-derived-backend-p backend 'html)
                    (format "<iframe width='440' \
         height='335' \
         src='https://www.youtube.com/embed/%s' \
         frameborder='0' \
         allowfullscreen>%s</iframe>" path (or "" desc)))
                   ((org-export-derived-backend-p backend 'latex)
                    (format "\\href{https://youtu.be/%s}{%s}" path (or desc "youtube")))
                   (t (format "https://youtu.be/%s" path))))


           (setq org-format-latex-header "\\documentclass{article}
         \\usepackage[usenames]{xcolor}

         \\usepackage[T1]{fontenc}

         \\usepackage{booktabs}

         \\pagestyle{empty}             % do not remove
         % The settings below are copied from fullpage.sty
         \\setlength{\\textwidth}{\\paperwidth}
         \\addtolength{\\textwidth}{-3cm}
         \\setlength{\\oddsidemargin}{1.5cm}
         \\addtolength{\\oddsidemargin}{-2.54cm}
         \\setlength{\\evensidemargin}{\\oddsidemargin}
         \\setlength{\\textheight}{\\paperheight}
         \\addtolength{\\textheight}{-\\headheight}
         \\addtolength{\\textheight}{-\\headsep}
         \\addtolength{\\textheight}{-\\footskip}
         \\addtolength{\\textheight}{-3cm}
         \\setlength{\\topmargin}{1.5cm}
         \\addtolength{\\topmargin}{-2.54cm}
         % my custom stuff
         \\usepackage[nofont,plaindd]{bmc-maths}
         \\usepackage{arev}
         ")


           (setq org-format-latex-options
                 (plist-put org-format-latex-options :background "Transparent"))


)
#+end_src

** Numbered Overlay for Headings [Scimax]
#+BEGIN_SRC elisp
(after! org
  ;;* org-numbered headings
  (defun scimax-overlay-numbered-headings ()
    "Put numbered overlays on the headings."
    (interactive)
    (loop for (p lv) in (let ((counters (copy-list '(0 0 0 0 0 0 0 0 0 0)))
                              (current-level 1)
                              last-level)
                          (mapcar (lambda (x)
                                    (list (car x)
                                          ;; trim trailing zeros
                                          (let ((v (nth 1 x)))
                                            (while (= 0 (car (last v)))
                                              (setq v (butlast v)))
                                            v)))
                                  (org-map-entries
                                   (lambda ()
                                     (let* ((hl (org-element-context))
                                            (level (org-element-property :level hl)))
                                       (setq last-level current-level
                                             current-level level)
                                       (cond
                                        ;; no level change or increase, increment level counter
                                        ((or (= last-level current-level)
                                             (> current-level last-level))
                                         (incf (nth current-level counters)))

                                        ;; decrease in level
                                        (t
                                         (loop for i from (+ 1 current-level) below (length counters)
                                               do
                                               (setf (nth i counters) 0))
                                         (incf (nth current-level counters))))

                                       (list (point) (-slice counters 1)))))))
          do
          (let ((ov (make-overlay p p)))
            (overlay-put ov 'before-string (concat (mapconcat 'number-to-string lv ".") ". "))
            (overlay-put ov 'numbered-heading t))))

  (define-minor-mode scimax-numbered-org-mode
    "Minor mode to number org headings."
    :init-value nil
    (cl-labels ((fl-noh (limit) (save-restriction
                                  (widen)
                                  (ov-clear 'numbered-heading)
                                  (scimax-overlay-numbered-headings))))

      (if scimax-numbered-org-mode
          (progn
            (font-lock-add-keywords
             nil
             `((fl-noh 0 nil)))
            (font-lock-fontify-buffer))
        (ov-clear 'numbered-heading)
        (font-lock-remove-keywords
         nil
         `((fl-noh 0 nil))))))
)
#+END_SRC
** Scimax Org renumber environment in latex previews

#+begin_src elisp
;; Numbered equations all have (1) as the number for fragments with vanilla
;; org-mode. This code injects the correct numbers into the previews so they
;; look good.
(defun scimax-org-renumber-environment (orig-func &rest args)
  "A function to inject numbers in LaTeX fragment previews."
  (let ((results '())
        (counter -1)
        (numberp))
    (setq results (cl-loop for (begin . env) in
                           (org-element-map (org-element-parse-buffer) 'latex-environment
                             (lambda (env)
                               (cons
                                (org-element-property :begin env)
                                (org-element-property :value env))))
                           collect
                           (cond
                            ((and (string-match "\\\\begin{equation}" env)
                                  (not (string-match "\\\\tag{" env)))
                             (cl-incf counter)
                             (cons begin counter))
                            ((string-match "\\\\begin{align}" env)
                             (prog2
                                 (cl-incf counter)
                                 (cons begin counter)
                               (with-temp-buffer
                                 (insert env)
                                 (goto-char (point-min))
                                 ;; \\ is used for a new line. Each one leads to a number
                                 (cl-incf counter (count-matches "\\\\$"))
                                 ;; unless there are nonumbers.
                                 (goto-char (point-min))
                                 (cl-decf counter (count-matches "\\nonumber")))))
                            (t
                             (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))

  (apply orig-func args))


(defun scimax-toggle-latex-equation-numbering ()
  "Toggle whether LaTeX fragments are numbered."
  (interactive)
  (if (not (get 'scimax-org-renumber-environment 'enabled))
      (progn
        (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
        (put 'scimax-org-renumber-environment 'enabled t)
        (message "Latex numbering enabled"))
    (advice-remove 'org-create-formula-image #'scimax-org-renumber-environment)
    (put 'scimax-org-renumber-environment 'enabled nil)
    (message "Latex numbering disabled.")))

(after! latex
  (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
  (put 'scimax-org-renumber-environment 'enabled t)
  )
#+end_src

** Plantuml
#+BEGIN_SRC elisp

(after! org
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))
#+END_SRC
** Org Roam Backlinks fix

#+begin_src elisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                        Org roam
;;                                        backlinks fix                                                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun collect-backlinks-string (backend)
  (when (org-roam-node-at-point)
    (let* ((source-node (org-roam-node-at-point))
           (source-file (org-roam-node-file source-node))
           (nodes-in-file (--filter (s-equals? (org-roam-node-file it) source-file)
                                    (org-roam-node-list)))
           (nodes-start-position (-map 'org-roam-node-point nodes-in-file))
           ;; Nodes don't store the last position, so get the next headline position
           ;; and subtract one character (or, if no next headline, get point-max)
           (nodes-end-position (-map (lambda (nodes-start-position)
                                       (goto-char nodes-start-position)
                                       (if (org-before-first-heading-p) ;; file node
                                           (point-max)
                                         (call-interactively
                                          'org-forward-heading-same-level)
                                         (if (> (point) nodes-start-position)
                                             (- (point) 1) ;; successfully found next
                                           (point-max)))) ;; there was no next
                                     nodes-start-position))
           ;; sort in order of decreasing end position
           (nodes-in-file-sorted (->> (-zip nodes-in-file nodes-end-position)
                                      (--sort (> (cdr it) (cdr other))))))
      (dolist (node-and-end nodes-in-file-sorted)
        (-let (((node . end-position) node-and-end))
          (when (org-roam-backlinks-get node)
            (goto-char end-position)
            ;; Add the references as a subtree of the node
            (setq heading (format "\n\n%s References\n"
                                  (s-repeat (+ (org-roam-node-level node) 1) "*")))
            (insert heading)
            (setq properties-drawer ":PROPERTIES:\n:HTML_CONTAINER_CLASS: references\n:END:\n")
            (insert properties-drawer)
            (dolist (backlink (org-roam-backlinks-get node))
              (let* ((source-node (org-roam-backlink-source-node backlink))
                     (properties (org-roam-backlink-properties backlink))
                     (outline (when-let ((outline (plist-get properties :outline)))
                                (mapconcat #'org-link-display-format outline " > ")))
                     (point (org-roam-backlink-point backlink))
                     (text (s-replace "\n" " " (org-roam-preview-get-contents
                                                (org-roam-node-file source-node)
                                                point)))
                     (reference (format "%s [[id:%s][%s]]\n%s\n%s\n\n"
                                        (s-repeat (+ (org-roam-node-level node) 2) "*")
                                        (org-roam-node-id source-node)
                                        (org-roam-node-title source-node)
                                        (if outline (format "%s (/%s/)"
                                                            (s-repeat (+ (org-roam-node-level node) 3) "*") outline) "")
                                        text)))
                (insert reference)))))))))
(add-hook 'org-export-before-processing-hook 'collect-backlinks-string)
#+end_src

** Org Roam Agenda

#+begin_src elisp
(after! org-roam

  ;; Attachments removed from org-roam db
  (setq org-roam-db-node-include-function
        (lambda ()
          (not (member "ATTACH" (org-get-tags)))))

  ;; From System Crafter's streams https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  ;; ORG ROAM TO AGENDA
  ;; https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
  ;; The buffer you put this code in must have lexical-binding set to t!
  ;; See the final configuration at the end for more details.

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (delete-dups (mapcar #'org-roam-node-file
                         (seq-filter
                          (my/org-roam-filter-by-tag tag-name)
                          (org-roam-node-list)))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "agenda")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

  ;; TO FIND ONLY AGENDA FILES IN ORG-ROAM
  ;;
  ;;
  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "agenda")
     :templates
     '(("p" "project" entry
        (file (concat org-directory "templates/newprojtemplate.org"))
        :if-new (file "%<%Y%m%d%H%M%S>-${slug}.org")
        :unnarrowed t)))
    )

  ;; Org-roam template similar to org template
  ;;
  (defun my/org-roam-capture-idea ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "agenda"))
                       :templates '(("i" "idea" plain "** TODO %?"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: agenda"
                                                            ("Ideas and Tasks"))))))
  )

#+end_src

** Org Pretty Mode: Fancy Priorities and Superstar Mode
#+BEGIN_SRC elisp
(after! org
  (add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)
  (setq org-hide-emphasis-markers t
        org-startup-indented t
        org-fontify-quote-and-verse-blocks t
        org-hide-leading-stars t
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-list-demote-modify-bullet '(("+" . "-") ("1." . "a.") ("-" . "+") ("a." . "1."))
        org-superstar-leading-bullet ?\s
        org-superstar-headline-bullets-list '(?\s)
        org-superstar-leading-fallback ?\s
        org-superstar-remove-leading-stars t
        org-superstar-todo-bullet-alist
        '(("TODO" . 9744)
          ("[ ]"  . 9744)
          ("DONE" . 9745)
          ("[X]"  . 9745))
        org-priority-faces '((?A . (:foreground "red" :weight bold))
                             (?B . (:foreground "green" :weight bold))
                             (?C . (:foreground "tomato"))
                             (?D . (:foreground "orange")))
        org-priority-default 68
        org-priority-highest 65
        org-priority-lowest 68
        org-ellipsis "⤵"
        )
  (setq org-emphasis-alist
        '(("*" (bold :foreground "Orange" ))
          ("/" (italic :foreground "VioletRed"))
          ("_" underline)
          ("=" (:foreground "maroon"))
          ("@" (:foreground "seashell"))
          ("~" (:foreground "deep sky blue"))
          ("+" (:strike-through t :foreground "slate grey" ))))
  )

#+END_SRC
** Custom Links
#+begin_src elisp
(after! org
  (+org-init-custom-links-h))
(defun +org-init-custom-links-h ()
  ;; Modify default file: links to colorize broken file links red
  (org-link-set-parameters
   "file"
   :face (lambda (path)
           (if (or (file-remote-p path)
                   ;; filter out network shares on windows (slow)
                   (and IS-WINDOWS (string-prefix-p "\\\\" path))
                   (file-exists-p path))
               'org-link
             '(warning org-link))))

  ;; Additional custom links for convenience
  (pushnew! org-link-abbrev-alist
            '("github"      . "https://github.com/%s")
            '("youtube"     . "https://youtube.com/watch?v=%s")
            '("google"      . "https://google.com/search?q=")
            '("gimages"     . "https://google.com/images?q=%s")
            '("gmap"        . "https://maps.google.com/maps?q=%s")
            '("duckduckgo"  . "https://duckduckgo.com/?q=%s")
            '("wikipedia"   . "https://en.wikipedia.org/wiki/%s")
            '("wolfram"     . "https://wolframalpha.com/input/?i=%s")
            '("doom-repo"   . "https://github.com/hlissner/doom-emacs/%s"))

  (+org-define-basic-link "org" 'org-directory)
  (+org-define-basic-link "doom" 'doom-emacs-dir)
  (+org-define-basic-link "doom-docs" 'doom-docs-dir)
  (+org-define-basic-link "doom-modules" 'doom-modules-dir)

  ;; Add "lookup" links for packages and keystrings; useful for Emacs
  ;; documentation -- especially Doom's!
  (org-link-set-parameters
   "kbd"
   :follow (lambda (_) (minibuffer-message "%s" (+org-display-link-in-eldoc-a)))
   :help-echo #'+org-read-kbd-at-point
   :face 'help-key-binding)
  (org-link-set-parameters
   "doom-package"
   :follow #'+org-link--doom-package-follow-fn
   :face (lambda (_) '(:inherit org-priority :slant italic)))
  (org-link-set-parameters
   "doom-module"
   :follow #'+org-link--doom-module-follow-fn
   :face #'+org-link--doom-module-face-fn)

  ;; Allow inline image previews of http(s)? urls or data uris.
  ;; `+org-http-image-data-fn' will respect `org-display-remote-inline-images'.
  (setq org-display-remote-inline-images 'download) ; TRAMP urls
  (org-link-set-parameters "http"  :image-data-fun #'+org-http-image-data-fn)
  (org-link-set-parameters "https" :image-data-fun #'+org-http-image-data-fn)
  (org-link-set-parameters "img"   :image-data-fun #'+org-inline-image-data-fn)

  ;; Add support for youtube links + previews
  (require 'org-yt nil t)

  (defadvice! +org-dont-preview-if-disabled-a (&rest _)
    "Make `org-yt' respect `org-display-remote-inline-images'."
    :before-while #'org-yt-image-data-fun
    (not (eq org-display-remote-inline-images 'skip))))
#+end_src

** Org Init Custom Links
#+begin_src elisp
(after! org
  (+org-init-custom-links-h))
(defun +org-init-custom-links-h ()
  ;; Modify default file: links to colorize broken file links red
  (org-link-set-parameters
   "file"
   :face (lambda (path)
           (if (or (file-remote-p path)
                   ;; filter out network shares on windows (slow)
                   (and IS-WINDOWS (string-prefix-p "\\\\" path))
                   (file-exists-p path))
               'org-link
             '(warning org-link))))

  ;; Additional custom links for convenience
  (pushnew! org-link-abbrev-alist
            '("github"      . "https://github.com/%s")
            '("youtube"     . "https://youtube.com/watch?v=%s")
            '("google"      . "https://google.com/search?q=")
            '("gimages"     . "https://google.com/images?q=%s")
            '("gmap"        . "https://maps.google.com/maps?q=%s")
            '("duckduckgo"  . "https://duckduckgo.com/?q=%s")
            '("wikipedia"   . "https://en.wikipedia.org/wiki/%s")
            '("wolfram"     . "https://wolframalpha.com/input/?i=%s")
            '("doom-repo"   . "https://github.com/hlissner/doom-emacs/%s"))

  (+org-define-basic-link "org" 'org-directory)
  (+org-define-basic-link "doom" 'doom-emacs-dir)
  (+org-define-basic-link "doom-docs" 'doom-docs-dir)
  (+org-define-basic-link "doom-modules" 'doom-modules-dir)

  ;; Add "lookup" links for packages and keystrings; useful for Emacs
  ;; documentation -- especially Doom's!
  (org-link-set-parameters
   "kbd"
   :follow (lambda (_) (minibuffer-message "%s" (+org-display-link-in-eldoc-a)))
   :help-echo #'+org-read-kbd-at-point
   :face 'help-key-binding)
  (org-link-set-parameters
   "doom-package"
   :follow #'+org-link--doom-package-follow-fn
   :face (lambda (_) '(:inherit org-priority :slant italic)))
  (org-link-set-parameters
   "doom-module"
   :follow #'+org-link--doom-module-follow-fn
   :face #'+org-link--doom-module-face-fn)

  ;; Allow inline image previews of http(s)? urls or data uris.
  ;; `+org-http-image-data-fn' will respect `org-display-remote-inline-images'.
  (setq org-display-remote-inline-images 'download) ; TRAMP urls
  (org-link-set-parameters "http"  :image-data-fun #'+org-http-image-data-fn)
  (org-link-set-parameters "https" :image-data-fun #'+org-http-image-data-fn)
  (org-link-set-parameters "img"   :image-data-fun #'+org-inline-image-data-fn)

  ;; Add support for youtube links + previews
  (require 'org-yt nil t)

  (defadvice! +org-dont-preview-if-disabled-a (&rest _)
    "Make `org-yt' respect `org-display-remote-inline-images'."
    :before-while #'org-yt-image-data-fun
    (not (eq org-display-remote-inline-images 'skip))))
#+end_src

** Org Books
#+BEGIN_SRC elisp
;; (setq org-books-file "~/OneDrive/OrgMode/org/gtd/books.org")

;; (after! org
;;   (require 'org-books)
;;     (add-to-list 'org-capture-templates
;;       '("f" "Book" entry (file "~/OneDrive/OrgMode/org/gtd/books.org")
;;          "%(let* ((url (substring-no-properties (current-kill 0)))
;;                   (details (org-books-get-details url)))
;;              (when details
;;                (apply #'org-books-format 3 details))))"))
;;     (add-to-list 'org-capture-templates
;;       '("g" "Auto Book Entry" entry (file "~/OneDrive/OrgMode/org/gtd/books.org")
;;          "%(let* ((url (substring-no-properties (current-kill 0)))
;;                   (details (org-books-get-details %u)))
;;              (when details
;;                (apply #'org-books-format 3 details))))"))
;; )
#+END_SRC

** Org Books

#+begin_src elisp
(setq org-books-file "~/OneDrive/OrgMode/org/notes/books.org")

(after! org
  (require 'org-books)
  (add-to-list 'org-capture-templates
               '("f" "Book" entry (file "~/OneDrive/OrgMode/org/notes/books.org")
                 "%(let* ((url (substring-no-properties (current-kill 0)))
                  (details (org-books-get-details url)))
             (when details (apply #'org-books-format 1 details)))"))
  )
#+end_src

** Sway el

#+begin_src elisp
;; (setq shackle-default-rule '(:frame t)
;;       shackle-display-buffer-frame-function 'sway-shackle-display-buffer-frame)

(sway-socket-tracker-mode)
(sway-undertaker-mode) ;; If you want to use :dedicate, read below.
(sway-x-focus-through-sway-mode) ;; Temporary workaround for Sway bug 6216

;; To use with pgtk Emacs, you *must* ensure that frame names are
;; unique.  This is a way to achieve this:
(setq frame-title-format '("%b — GNU Emacs [" (:eval (frame-parameter (selected-frame) 'window-id)) "]"))
;; You may want to make this nicer, feel free to improve.  The only
;; requirement is that each frame must have a strictly unique name on
;; that Emacs instance (name collisions with other programs, including
;; other Emacs processes, are not an issue )
#+end_src

** Dired Subtree

#+BEGIN_SRC elisp
(use-package dired-subtree
  :after dired
  :config
  (setq dired-subtree-use-backgrounds nil)
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<C-tab>" . dired-subtree-cycle)
              ("<S-iso-lefttab>" . dired-subtree-remove)))
#+END_SRC
** Note Taking and Bibliography Management

*** Make an arxiv protocol

#+begin_src elisp
(add-to-list 'org-protocol-protocol-alist
             '("arxiv-protocol"
               :protocol "arxiv"
               :function arxiv-protocol))

(defun arxiv-protocol (info)
  (let ((url (plist-get info :url)))
    (message (format "Arxiv received: `%s'" url))
    (let* ((match-idx (string-match "arxiv.org/.../\\([0-9.]*\\)" url))
        (matched-arxiv-number (string-remove-suffix "." (match-string 1 url))))
        (message (format "Extracted Arxiv number: `%s'" matched-arxiv-number))
        (when matched-arxiv-number
          (my/save-arxiv-to-local-db matched-arxiv-number)))
    nil))
#+end_src
*** Save arxiv pdf to local db

#+begin_src elisp
;; Save arxiv pdf to local and maintain a bibfile for the newly added paper, and update papers.org
(defun my/save-arxiv-to-local-db (matched-arxiv-number)
    "Save arxiv paper in local db

- Update the bib entry with the pdf file location
- Add a TODO entry in my papers.org to read the paper"
    (message "Going to arXiv: %s" matched-arxiv-number)
    (let* ((last-arxiv-key "")
           (last-arxiv-title ""))
        (arxiv-get-pdf-add-bibtex-entry matched-arxiv-number arxiv_bib arxiv_pdf_loc)
        ;; Now, we are updating the most recent bib file with the pdf location
        (message "Update bibtex with pdf file location")
        (save-window-excursion
                ;; Get the bib file
                (find-file arxiv_bib)
                ;; get to last line
                (goto-char (point-max))
                ;; get to the first line of bibtex
                (bibtex-beginning-of-entry)
                (let* ((entry (bibtex-parse-entry))
                        (key (cdr (assoc "=key=" entry)))
                        (title (bibtex-completion-apa-get-value "title" entry))
                        (pdf (org-ref-get-pdf-filename key)))
                        (message (concat "checking for key: " key))
                        (message (concat "value of pdf: " pdf))
                        (when (file-exists-p pdf)
                        (bibtex-set-field "file" pdf)
                        (setq last-arxiv-key key)
                        (setq last-arxiv-title title)
                        (save-buffer)
                        )))
        ;; (message (concat "outside of save window, key: " last-arxiv-key))
        ;; Add a TODO entry with the cite key and title
        ;; This is a bit hacky solution as I don't know how to add the org entry programmatically
        (save-window-excursion
          (find-file (concat org-directory "papers.org"))
          (goto-char (point-max))
          (insert (format "** TODO Read paper (cite:%s) %s" last-arxiv-key last-arxiv-title))
          (save-buffer)
          ))
  )
#+end_src
** Docker

#+begin_src elisp
(after! dockerfile-mode
  (set-docsets! 'dockerfile-mode "Docker")

  (when (modulep! +lsp)
    (add-hook 'dockerfile-mode-local-vars-hook #'lsp! 'append)))

(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

** Vertico Posframe only on gui though

#+begin_src emacs-lisp
(add-hook 'after-make-frame-functions
          (lambda ()
            ;; we want some font only in GUI Emacs
            (when (window-system)
              (if (not vertico-posframe-mode)
                  (vertico-posframe-mode)
                (progn
                  (vertico-posframe-mode)
                  (vertico-posframe-mode))
                ))))
#+end_src

*** Dirvish - Getting more out of dired

#+begin_src emacs-lisp
(use-package! dirvish
  :config
  (map! :map dirvish-mode-map
        :n "y" #'dirvish-yank-menu
        :n "TAB" #'dirvish-subtree-toggle)
  (require 'dirvish-peek)
  (require 'dirvish-extras))
#+end_src

** Typescript for react

#+begin_src emacs-lisp
(use-package typescript-mode
  :after tree-sitter
  :config
  ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
  ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")

  ;; use our derived mode for tsx files
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
  ;; by default, typescript-mode is mapped to the treesitter typescript parser
  ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

;; https://github.com/orzechowskid/tsi.el/
;; great tree-sitter-based indentation for typescript/tsx, css, json
(use-package tsi
  :after tree-sitter
  ;; define autoload definitions which when actually invoked will cause package to be loaded
  :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
  :init
  (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
  (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
  (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
  (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))
#+end_src

** Use darkman to set themes automatically

#+begin_src emacs-lisp
(if (eq system-type 'gnu/linux)
    (require 'darkman))
#+end_src

** Tree Sitter
#+begin_src elisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(pushnew! tree-sitter-major-mode-language-alist
          '(scss-mode . css))
#+end_src

** Org Agenda hook

I want agenda to be more concise and easy to look at.
It fits only on my side monitor then.

#+begin_src elisp
;; make elisp function that decreases text scale by 2 if text scale is not adjusted already
(defun decrease-text-scale ()
  (interactive)
  (if (eq text-scale-mode-amount 0)
      (text-scale-decrease 1)))

(add-hook 'evil-org-agenda-mode-hook #'decrease-text-scale)

#+end_src

** Consult-dir
#+begin_src elisp
(use-package consult-dir
  :ensure t
  :config
  (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

#+end_src

** Mpdel

#+begin_src elisp
(require 'mpdel)
(mpdel-mode)
(use-package mpdel-embark
  :demand t
  :after (embark mpdel)
  :config
  (progn
    (mpdel-embark-setup)))
#+end_src

** Dired Hide Details by Default

#+begin_src elisp
(add-hook 'dirvish-mode-hook
          (lambda ()
            (dired-hide-details-mode)))
#+end_src

** Dired Sort

#+BEGIN_SRC elisp
;; Modified from https://wilkesley.org/~ian/xah/emacs/dired_sort.html
(defun light-dired-sort ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2015-07-30"
  (interactive)
  (let (-sort-by -hidden -arg)
    (setq -sort-by (completing-read "Sort by:" '( "Date" "Size" "Name" "Ext" "Dir" "Date Asc" "Name Desc" "Size Asc")))
    (setq -hidden (completing-read "Show Hidden Files:" '("Yes" "No")))
    (cond
     ((equal -hidden "Yes")
      (progn
        (cond
         ((equal -sort-by "Name") (setq -arg "-Ahl --si --time-style long-iso "))
         ((equal -sort-by "Date") (setq -arg "-Ahlt --si --time-style long-iso"))
         ((equal -sort-by "Size") (setq -arg "-AhlS --si --time-style long-iso"))
         ((equal -sort-by "Ext") (setq -arg "-AhlX --si --time-style long-iso --group-directories-first"))
         ((equal -sort-by "Name Desc") (setq -arg "-Ahlr --si --time-style long-iso "))
         ((equal -sort-by "Date Asc") (setq -arg "-Ahltr --si --time-style long-iso"))
         ((equal -sort-by "Size Asc") (setq -arg "-AhlSr --si --time-style long-iso"))
         ((equal -sort-by "Dir") (setq -arg "-Ahl --si --time-style long-iso --group-directories-first"))
         (t (error "Logic error 09535" )))
        (dired-sort-other -arg )
        ;; (dired-listing-switches -arg )
        (setq dired-listing-switches -arg)))
     ((equal -hidden "No")
      (progn
        (message -hidden)
        (cond
         ((equal -sort-by "Name") (setq -arg "-hl --si --time-style long-iso "))
         ((equal -sort-by "Date") (setq -arg "-hlt --si --time-style long-iso"))
         ((equal -sort-by "Size") (setq -arg "-hlS --si --time-style long-iso"))
         ((equal -sort-by "Ext") (setq -arg "-hlX --si --time-style long-iso --group-directories-first"))
         ((equal -sort-by "Name Desc") (setq -arg "-hlr --si --time-style long-iso"))
         ((equal -sort-by "Date Desc") (setq -arg "-hltr --si --time-style long-iso"))
         ((equal -sort-by "Size Desc") (setq -arg "-hlSr --si --time-style long-iso"))
         ((equal -sort-by "Dir") (setq -arg "-hl --si --time-style long-iso --group-directories-first"))
         (t (error "Logic error 09535" )))
        (dired-sort-other -arg )
        (setq dired-listing-switches -arg)))
     )
    ))

(map! (:after dired
       :map dired-mode-map
       :n "gb" #'light-dired-sort))

#+END_SRC
*** Vterm not showing my completions
#+BEGIN_SRC elisp
(custom-set-faces!
 '(vterm-color-black :foreground "OrangeRed3" :background "BlueViolet"))
#+END_SRC

** Treesitter emacs 30

#+begin_src emacs-lisp
(setq treesit-extra-load-path '("~/.config/treesitter/"))
(add-to-list 'major-mode-remap-alist '(css-mode . css-ts-mode))
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(add-to-list 'major-mode-remap-alist '(sh-mode . bash-ts-mode))
(add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode))
(add-to-list 'major-mode-remap-alist '(yaml-mode . yaml-ts-mode))
(add-to-list 'major-mode-remap-alist '(toml-mode . toml-ts-mode))
(add-to-list 'major-mode-remap-alist '(json-mode . json-ts-mode))
(add-to-list 'major-mode-remap-alist '(html-mode . html-ts-mode))
(add-to-list 'major-mode-remap-alist '(js-mode . js-ts-mode))
#+end_src
